{"ast":null,"code":"import _classCallCheck from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/dudu/Desktop/ReactApp/my-app/src/RawText.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container, Form, FormGroup, Input, Button } from \"reactstrap\";\nimport Icon from \"react-fontawesome\";\nimport MainMenu from \"../components/MainMenu\";\nimport Loading from \"../components/Loading\";\nimport Results from \"../components/Results\";\n\nvar RawText =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RawText, _Component);\n\n  function RawText(props) {\n    var _this;\n\n    _classCallCheck(this, RawText);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RawText).call(this, props));\n    _this.state = {\n      rawTextContent: \"\",\n      wordCount: \"0\",\n      submitColor: \"secondary\",\n      submitDisallow: true,\n      fetchingData: false,\n      loadingmsg: \"\",\n      responseDataRecieved: false,\n      responseData: {}\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.tryAgain = _this.tryAgain.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(RawText, [{\n    key: \"focusInput\",\n    value: function focusInput(component) {\n      if (component) {\n        ReactDOM.findDOMNode(component).focus();\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        rawTextContent: event.target.value\n      });\n      var wordCount = event.target.value;\n      wordCount = wordCount.replace(/^\\s+|\\s+$/g, \"\");\n\n      if (wordCount === \"\") {\n        wordCount = 0;\n      } else {\n        wordCount = wordCount.split(/\\s+/).length;\n      }\n\n      if (wordCount === 0) {\n        this.setState({\n          submitDisallow: true,\n          submitColor: \"secondary\"\n        });\n      } else if (wordCount > 0) {\n        this.setState({\n          submitDisallow: false,\n          submitColor: \"success\"\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      this.setState({\n        fetchingData: true,\n        loadingmsg: \"Fetching Personality Insights\"\n      });\n      var formData = new FormData(event.target);\n      fetch(process.env.REACT_APP_WATSON_API_ENDPOINT, {\n        method: \"POST\",\n        body: formData\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        if (data.error) {\n          this.setState({\n            fetchingData: false,\n            responseDataRecieved: false\n          }, function () {\n            alert(data.error + \". Please try again.\");\n          });\n        } else {\n          this.setState({\n            fetchingData: false,\n            responseData: data,\n            responseDataRecieved: true\n          });\n        }\n      }.bind(this));\n    }\n  }, {\n    key: \"tryAgain\",\n    value: function tryAgain() {\n      this.setState({\n        rawTextContent: \"\",\n        wordCount: \"0\",\n        submitColor: \"secondary\",\n        submitDisallow: true,\n        fetchingData: false,\n        loadingmsg: \"\",\n        responseDataRecieved: false,\n        responseData: {}\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(MainMenu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), this.state.fetchingData && React.createElement(Loading, {\n        loadingmsg: this.state.loadingmsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container__raw-text hidden-load animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, !this.state.responseDataRecieved && React.createElement(Container, {\n        className: \"raw-text-data-entry\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"page-heading text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"font\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        role: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"textarea\",\n        placeholder: \"You can enter as little as 100 words, but for a more accurate analysis, you need more words. Watson requires a minimum of 600, preferably 1,200 or more, to compute statistically significant estimates.\",\n        name: \"raw-text-content\",\n        id: \"raw-text-content\",\n        onChange: this.handleChange,\n        ref: this.focusInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(Button, {\n        type: \"submit\",\n        disabled: this.state.submitDisallow,\n        size: \"lg\",\n        color: this.state.submitColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Analyse\"))), this.state.responseDataRecieved && React.createElement(Results, {\n        resultData: this.state.responseData,\n        rawText: this.state.rawTextContent,\n        tryAgain: this.tryAgain,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RawText;\n}(Component);\n\nexport default RawText;","map":{"version":3,"sources":["/Users/dudu/Desktop/ReactApp/my-app/src/RawText.js"],"names":["React","Component","ReactDOM","Container","Form","FormGroup","Input","Button","Icon","MainMenu","Loading","Results","RawText","props","state","rawTextContent","wordCount","submitColor","submitDisallow","fetchingData","loadingmsg","responseDataRecieved","responseData","handleChange","bind","handleSubmit","tryAgain","component","findDOMNode","focus","event","setState","target","value","replace","split","length","preventDefault","formData","FormData","fetch","process","env","REACT_APP_WATSON_API_ENDPOINT","method","body","then","response","json","data","error","alert","focusInput"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,KAArC,EAA4CC,MAA5C,QAA0D,YAA1D;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;IAEMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE,EADL;AAEXC,MAAAA,SAAS,EAAE,GAFA;AAGXC,MAAAA,WAAW,EAAE,WAHF;AAIXC,MAAAA,cAAc,EAAE,IAJL;AAKXC,MAAAA,YAAY,EAAE,KALH;AAMXC,MAAAA,UAAU,EAAE,EAND;AAOXC,MAAAA,oBAAoB,EAAE,KAPX;AAQXC,MAAAA,YAAY,EAAE;AARH,KAAb;AAUA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AACA,UAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,uDAAhB;AAdiB;AAelB;;;;+BAEUG,S,EAAW;AACpB,UAAIA,SAAJ,EAAe;AACbzB,QAAAA,QAAQ,CAAC0B,WAAT,CAAqBD,SAArB,EAAgCE,KAAhC;AACD;AACF;;;iCAEYC,K,EAAO;AAClB,WAAKC,QAAL,CAAc;AACZhB,QAAAA,cAAc,EAAEe,KAAK,CAACE,MAAN,CAAaC;AADjB,OAAd;AAIA,UAAIjB,SAAS,GAAGc,KAAK,CAACE,MAAN,CAAaC,KAA7B;AACAjB,MAAAA,SAAS,GAAGA,SAAS,CAACkB,OAAV,CAAkB,YAAlB,EAAgC,EAAhC,CAAZ;;AAEA,UAAIlB,SAAS,KAAK,EAAlB,EAAsB;AACpBA,QAAAA,SAAS,GAAG,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,SAAS,GAAGA,SAAS,CAACmB,KAAV,CAAgB,KAAhB,EAAuBC,MAAnC;AACD;;AAED,UAAIpB,SAAS,KAAK,CAAlB,EAAqB;AACnB,aAAKe,QAAL,CAAc;AACZb,UAAAA,cAAc,EAAE,IADJ;AAEZD,UAAAA,WAAW,EAAE;AAFD,SAAd;AAID,OALD,MAKO,IAAID,SAAS,GAAG,CAAhB,EAAmB;AACxB,aAAKe,QAAL,CAAc;AACZb,UAAAA,cAAc,EAAE,KADJ;AAEZD,UAAAA,WAAW,EAAE;AAFD,SAAd;AAID;AACF;;;iCAEYa,K,EAAO;AAClBA,MAAAA,KAAK,CAACO,cAAN;AAEA,WAAKN,QAAL,CAAc;AACZZ,QAAAA,YAAY,EAAE,IADF;AAEZC,QAAAA,UAAU,EAAE;AAFA,OAAd;AAKA,UAAMkB,QAAQ,GAAG,IAAIC,QAAJ,CAAaT,KAAK,CAACE,MAAnB,CAAjB;AAEAQ,MAAAA,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,6BAAb,EAA4C;AAC/CC,QAAAA,MAAM,EAAE,MADuC;AAE/CC,QAAAA,IAAI,EAAEP;AAFyC,OAA5C,CAAL,CAIGQ,IAJH,CAIQ,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OANH,EAOGF,IAPH,CAQI,UAASG,IAAT,EAAe;AACb,YAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,eAAKnB,QAAL,CACE;AACEZ,YAAAA,YAAY,EAAE,KADhB;AAEEE,YAAAA,oBAAoB,EAAE;AAFxB,WADF,EAKE,YAAW;AACT8B,YAAAA,KAAK,CAACF,IAAI,CAACC,KAAL,GAAa,qBAAd,CAAL;AACD,WAPH;AASD,SAVD,MAUO;AACL,eAAKnB,QAAL,CAAc;AACZZ,YAAAA,YAAY,EAAE,KADF;AAEZG,YAAAA,YAAY,EAAE2B,IAFF;AAGZ5B,YAAAA,oBAAoB,EAAE;AAHV,WAAd;AAKD;AACF,OAlBD,CAkBEG,IAlBF,CAkBO,IAlBP,CARJ;AA4BD;;;+BAEU;AACT,WAAKO,QAAL,CAAc;AACZhB,QAAAA,cAAc,EAAE,EADJ;AAEZC,QAAAA,SAAS,EAAE,GAFC;AAGZC,QAAAA,WAAW,EAAE,WAHD;AAIZC,QAAAA,cAAc,EAAE,IAJJ;AAKZC,QAAAA,YAAY,EAAE,KALF;AAMZC,QAAAA,UAAU,EAAE,EANA;AAOZC,QAAAA,oBAAoB,EAAE,KAPV;AAQZC,QAAAA,YAAY,EAAE;AARF,OAAd;AAUD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGG,KAAKR,KAAL,CAAWK,YAAX,IACC,oBAAC,OAAD;AAAS,QAAA,UAAU,EAAE,KAAKL,KAAL,CAAWM,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAOE;AAAK,QAAA,SAAS,EAAC,iDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAAC,KAAKN,KAAL,CAAWO,oBAAZ,IACC,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,qBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,0BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKI,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,WAAW,EAAC,0MAFd;AAGE,QAAA,IAAI,EAAC,kBAHP;AAIE,QAAA,EAAE,EAAC,kBAJL;AAKE,QAAA,QAAQ,EAAE,KAAKF,YALjB;AAME,QAAA,GAAG,EAAE,KAAK6B,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAYE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,QAAQ,EAAE,KAAKtC,KAAL,CAAWI,cAFvB;AAGE,QAAA,IAAI,EAAC,IAHP;AAIE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWG,WAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZF,CAJF,CAFJ,EA8BG,KAAKH,KAAL,CAAWO,oBAAX,IACC,oBAAC,OAAD;AACE,QAAA,UAAU,EAAE,KAAKP,KAAL,CAAWQ,YADzB;AAEE,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWC,cAFtB;AAGE,QAAA,QAAQ,EAAE,KAAKW,QAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA/BJ,CAPF,CADF;AAgDD;;;;EAzJmBzB,S;;AA4JtB,eAAeW,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container, Form, FormGroup, Input, Button } from \"reactstrap\";\nimport Icon from \"react-fontawesome\";\nimport MainMenu from \"../components/MainMenu\";\nimport Loading from \"../components/Loading\";\nimport Results from \"../components/Results\";\n\nclass RawText extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rawTextContent: \"\",\n      wordCount: \"0\",\n      submitColor: \"secondary\",\n      submitDisallow: true,\n      fetchingData: false,\n      loadingmsg: \"\",\n      responseDataRecieved: false,\n      responseData: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.tryAgain = this.tryAgain.bind(this);\n  }\n\n  focusInput(component) {\n    if (component) {\n      ReactDOM.findDOMNode(component).focus();\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      rawTextContent: event.target.value\n    });\n\n    let wordCount = event.target.value;\n    wordCount = wordCount.replace(/^\\s+|\\s+$/g, \"\");\n\n    if (wordCount === \"\") {\n      wordCount = 0;\n    } else {\n      wordCount = wordCount.split(/\\s+/).length;\n    }\n\n    if (wordCount === 0) {\n      this.setState({\n        submitDisallow: true,\n        submitColor: \"secondary\"\n      });\n    } else if (wordCount > 0) {\n      this.setState({\n        submitDisallow: false,\n        submitColor: \"success\"\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.setState({\n      fetchingData: true,\n      loadingmsg: \"Fetching Personality Insights\"\n    });\n\n    const formData = new FormData(event.target);\n\n    fetch(process.env.REACT_APP_WATSON_API_ENDPOINT, {\n      method: \"POST\",\n      body: formData\n    })\n      .then(function(response) {\n        return response.json();\n      })\n      .then(\n        function(data) {\n          if (data.error) {\n            this.setState(\n              {\n                fetchingData: false,\n                responseDataRecieved: false\n              },\n              function() {\n                alert(data.error + \". Please try again.\");\n              }\n            );\n          } else {\n            this.setState({\n              fetchingData: false,\n              responseData: data,\n              responseDataRecieved: true\n            });\n          }\n        }.bind(this)\n      );\n  }\n\n  tryAgain() {\n    this.setState({\n      rawTextContent: \"\",\n      wordCount: \"0\",\n      submitColor: \"secondary\",\n      submitDisallow: true,\n      fetchingData: false,\n      loadingmsg: \"\",\n      responseDataRecieved: false,\n      responseData: {}\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <MainMenu />\n\n        {this.state.fetchingData && (\n          <Loading loadingmsg={this.state.loadingmsg} />\n        )}\n\n        <div className=\"container__raw-text hidden-load animated fadeIn\">\n          {!this.state.responseDataRecieved && (\n            <Container className=\"raw-text-data-entry\">\n              <h1 className=\"page-heading text-center\">\n                <Icon name=\"font\" />\n              </h1>\n              <Form onSubmit={this.handleSubmit}>\n                <FormGroup role=\"form\">\n                  <Input\n                    type=\"textarea\"\n                    placeholder=\"You can enter as little as 100 words, but for a more accurate analysis, you need more words. Watson requires a minimum of 600, preferably 1,200 or more, to compute statistically significant estimates.\"\n                    name=\"raw-text-content\"\n                    id=\"raw-text-content\"\n                    onChange={this.handleChange}\n                    ref={this.focusInput}\n                  />\n                </FormGroup>\n\n                <Button\n                  type=\"submit\"\n                  disabled={this.state.submitDisallow}\n                  size=\"lg\"\n                  color={this.state.submitColor}\n                >\n                  Analyse\n                </Button>\n              </Form>\n            </Container>\n          )}\n\n          {this.state.responseDataRecieved && (\n            <Results\n              resultData={this.state.responseData}\n              rawText={this.state.rawTextContent}\n              tryAgain={this.tryAgain}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RawText;\n"]},"metadata":{},"sourceType":"module"}