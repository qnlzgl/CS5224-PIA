{"ast":null,"code":"import _classCallCheck from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/dudu/Desktop/ReactApp/my-app/src/ResultsStrength.js\";\nimport React, { Component } from \"react\";\nimport { Container, Tooltip, Badge, Alert } from \"reactstrap\";\nimport IconBrain from \"./icon-brain.svg\";\n\nvar ResultStrength =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultStrength, _Component);\n\n  function ResultStrength(props) {\n    var _this;\n\n    _classCallCheck(this, ResultStrength);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultStrength).call(this, props));\n    _this.state = {\n      tooltipOpen: false,\n      strengthClass: \"\",\n      strengthLabel: \"\"\n    };\n    _this.toggleTooltip = _this.toggleTooltip.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ResultStrength, [{\n    key: \"toggleTooltip\",\n    value: function toggleTooltip() {\n      this.setState({\n        tooltipOpen: !this.state.tooltipOpen\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (this.props.wordCount < 600) {\n        this.setState({\n          strengthClass: \"analysis-weak\",\n          strengthLabel: \"Weak Analysis\"\n        });\n      } else if (this.props.wordCount >= 600 && this.props.wordCount < 1200) {\n        this.setState({\n          strengthClass: \"analysis-moderate\",\n          strengthLabel: \"Moderate Analysis\"\n        });\n      } else if (this.props.wordCount >= 1200 && this.props.wordCount < 6000) {\n        this.setState({\n          strengthClass: \"analysis-strong\",\n          strengthLabel: \"Strong Analysis\"\n        });\n      } else if (this.props.wordCount >= 6000) {\n        this.setState({\n          strengthClass: \"analysis-very-strong\",\n          strengthLabel: \"Very Strong Analysis\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        className: \"result-strength-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon-brain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon-brain-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: IconBrain,\n        alt: \"The Human Brain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"analysis-strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#tooltip\",\n        id: \"analysisStrengthTooltip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Badge, {\n        className: this.state.strengthClass,\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.state.strengthLabel)), React.createElement(Tooltip, {\n        className: \"analysis-strength-toolip\",\n        placement: \"top\",\n        isOpen: this.state.tooltipOpen,\n        target: \"analysisStrengthTooltip\",\n        toggle: this.toggleTooltip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Analysis strength is determined by word count of unstructured text provided. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), \"Weak < 600 words. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), \"Moderate < 1,200 words. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), \"Strong > 1,200 words.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), \"Very Strong > 6,000 words.\"))), this.props.warnings.map(function (warning) {\n        return React.createElement(Alert, {\n          className: \"result-msg\",\n          color: \"warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, warning.message);\n      }));\n    }\n  }]);\n\n  return ResultStrength;\n}(Component);\n\nexport default ResultStrength;","map":{"version":3,"sources":["/Users/dudu/Desktop/ReactApp/my-app/src/ResultsStrength.js"],"names":["React","Component","Container","Tooltip","Badge","Alert","ResultStrength","props","state","tooltipOpen","strengthClass","strengthLabel","toggleTooltip","bind","setState","wordCount","IconBrain","warnings","map","warning","message"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Tooltip, Badge, Alert } from \"reactstrap\";\nimport IconBrain from \"./icon-brain.svg\";\n\nclass ResultStrength extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tooltipOpen: false,\n      strengthClass: \"\",\n      strengthLabel: \"\"\n    };\n    this.toggleTooltip = this.toggleTooltip.bind(this);\n  }\n  toggleTooltip() {\n    this.setState({\n      tooltipOpen: !this.state.tooltipOpen\n    });\n  }\n\n  componentWillMount() {\n    if (this.props.wordCount < 600) {\n      this.setState({\n        strengthClass: \"analysis-weak\",\n        strengthLabel: \"Weak Analysis\"\n      });\n    } else if (this.props.wordCount >= 600 && this.props.wordCount < 1200) {\n      this.setState({\n        strengthClass: \"analysis-moderate\",\n        strengthLabel: \"Moderate Analysis\"\n      });\n    } else if (this.props.wordCount >= 1200 && this.props.wordCount < 6000) {\n      this.setState({\n        strengthClass: \"analysis-strong\",\n        strengthLabel: \"Strong Analysis\"\n      });\n    } else if (this.props.wordCount >= 6000) {\n      this.setState({\n        strengthClass: \"analysis-very-strong\",\n        strengthLabel: \"Very Strong Analysis\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Container className=\"result-strength-container\">\n        <div className=\"icon-brain\">\n          <div className=\"icon-brain-container\">\n            <img src={IconBrain} alt=\"The Human Brain\" />\n          </div>\n          <div className=\"analysis-strength\">\n            <a href=\"#tooltip\" id=\"analysisStrengthTooltip\">\n              <Badge className={this.state.strengthClass} color=\"danger\">\n                {this.state.strengthLabel}\n              </Badge>\n            </a>\n            <Tooltip\n              className=\"analysis-strength-toolip\"\n              placement=\"top\"\n              isOpen={this.state.tooltipOpen}\n              target=\"analysisStrengthTooltip\"\n              toggle={this.toggleTooltip}\n            >\n              Analysis strength is determined by word count of unstructured text\n              provided. <br />Weak &lt; 600 words. <br />Moderate &lt; 1,200\n              words. <br />Strong &gt; 1,200 words.<br />Very Strong &gt; 6,000\n              words.\n            </Tooltip>\n          </div>\n        </div>\n        {this.props.warnings.map(function(warning) {\n          return (\n            <Alert className=\"result-msg\" color=\"warning\">\n              {warning.message}\n            </Alert>\n          );\n        })}\n      </Container>\n    );\n  }\n}\n\nexport default ResultStrength;\n"]},"metadata":{},"sourceType":"module"}