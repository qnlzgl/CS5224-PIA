{"ast":null,"code":"/**\n * Copyright 2016 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar includes = require('lodash.includes');\n\nvar keys = require('lodash.keys');\n\nvar dictionaries = require('./dictionaries');\n\nvar I18nData = function () {\n  function I18nData(locale) {\n    _classCallCheck(this, I18nData);\n\n    this._locale = includes(keys(dictionaries), locale) ? locale : 'en';\n    this._dictionary = dictionaries[this._locale];\n  }\n\n  _createClass(I18nData, [{\n    key: 'data',\n    value: function data() {\n      //return keys(this._dictionary).reduce((res, k) => extend(res, this._dictionary[k]), {});\n      return Object.assign({}, this._dictionary);\n    }\n  }, {\n    key: 'translatorFactory',\n    value: function translatorFactory() {\n      var self = {\n        /**\n         * Get the value for the given key from the dictionary.\n         *\n         * @param dictionary A dictionary with String keys and String values.\n         * @param key A key. Can contain '.' to indicate key's present in sub-dictionaries.\n         *                   For example 'application.name' looks up for the 'application' key\n         *                   in the dictionary and, with it's value, looks up for the 'name' key.\n         * @param defaultValue A value to return if the key is not in the dictionary.\n         * @returns The value from the dictionary.\n         */\n        getKey: function getKey(dictionary, key, defaultValue) {\n          var i,\n              parts = key.split('.'),\n              value = dictionary;\n\n          for (i = 0; i < parts.length; i = i + 1) {\n            value = value[parts[i]];\n\n            if (!value) {\n              value = defaultValue;\n              break;\n            }\n          }\n\n          return value;\n        },\n\n        /**\n         * Creates a translation function given a dictionary of translations\n         * and an optional backup dictionary if the key is no present in the\n         * first one. The key is returned if not found in the dictionaries.\n         * @param translations A translation dictionary.\n         * @param defaults A translation dictionary.\n         * @returns {Function} A translator.\n         */\n        createTranslator: function createTranslator(translations, defaults) {\n          defaults = defaults || {};\n\n          var _this = this;\n\n          return function (key) {\n            var value = self.getKey(translations, key, null);\n\n            if (value === null) {\n              value = _this.getKey(defaults, key, key);\n            }\n\n            return value;\n          };\n        }\n      };\n      return self;\n    }\n  }]);\n\n  return I18nData;\n}();\n\nmodule.exports = I18nData;","map":null,"metadata":{},"sourceType":"script"}