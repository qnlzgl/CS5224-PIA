{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\n/* tslint:disable align */\n\n/* tslint:disable:no-use-before-declare */\n\nvar compileTemplate = function compileTemplate(Template, context, updateContext) {\n  var result = function result(data) {\n    updateContext(context, data);\n    var templateResult = ReactDOMServer.renderToStaticMarkup(React.createElement(Template, __assign({}, context)));\n    var parsed = Number(templateResult);\n    return isNaN(parsed) ? templateResult : parsed;\n  };\n\n  return result;\n};\n\nvar updateGroupHeaderContext = function updateGroupHeaderContext(context, data) {\n  context.$implicit = context.group = data;\n  context.field = data.field;\n  context.value = data.value;\n  context.aggregates = data.aggregates;\n};\n\nvar updateGroupFooterContext = function updateGroupFooterContext(context, data) {\n  context.group = data.group;\n  context.$implicit = context.aggregates = data;\n};\n\nvar updateFooterContext = function updateFooterContext(_context, _data) {};\n/* tslint:disable-line no-empty */\n\n/**\n * @hidden\n */\n\n\nexport var toExporterColumns = function toExporterColumns(sourceColumns) {\n  var exporterColumns = [];\n  var columnIndex = 0;\n\n  var addColumns = function addColumns(columns, result, level) {\n    columns.forEach(function (column) {\n      if (column.level === level) {\n        var exporterColumn = new ExporterColumn(column, columnIndex);\n        result.push(exporterColumn);\n\n        if (column.children && column.children.length > 1) {\n          var children = exporterColumn.columns = [];\n          addColumns(column.children, children, level + 1);\n        } else {\n          columnIndex++;\n        }\n      }\n    });\n  };\n\n  addColumns(sourceColumns, exporterColumns, 0);\n  return exporterColumns;\n};\n/**\n * @hidden\n */\n\nvar ExporterColumn =\n/** @class */\nfunction () {\n  function ExporterColumn(column, columnIndex) {\n    this.title = column.title;\n    this.field = column.field;\n    this.hidden = column.hidden;\n    this.locked = column.locked;\n    this.width = column.width;\n    this.headerCellOptions = column.headerCellOptions;\n    this.cellOptions = column.cellOptions;\n    this.groupHeaderCellOptions = column.groupHeaderCellOptions;\n    this.groupFooterCellOptions = column.groupFooterCellOptions;\n    this.footerCellOptions = column.footerCellOptions;\n\n    if (column.footer) {\n      this.footerTemplate = compileTemplate(column.footer, {\n        $implicit: column,\n        column: column,\n        columnIndex: columnIndex\n      }, updateFooterContext);\n    }\n\n    if (column.groupFooter) {\n      this.groupFooterTemplate = compileTemplate(column.groupFooter, {\n        column: column,\n        field: column.field\n      }, updateGroupFooterContext);\n    }\n\n    if (column.groupHeader) {\n      this.groupHeaderTemplate = compileTemplate(column.groupHeader, {}, updateGroupHeaderContext);\n    }\n  }\n\n  return ExporterColumn;\n}();\n\nexport { ExporterColumn };","map":null,"metadata":{},"sourceType":"module"}