{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { workbookOptions, toDataURL, isWorkbookOptions } from './ooxml/workbook';\n\nvar ExcelExport =\n/** @class */\nfunction (_super) {\n  __extends(ExcelExport, _super);\n\n  function ExcelExport(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.saveFile = function (dataURL) {\n      saveAs(dataURL, _this.props.fileName, {\n        forceProxy: _this.props.forceProxy,\n        proxyURL: _this.props.proxyURL\n      });\n    };\n\n    _this.extractColumns = function (children, level) {\n      if (level === void 0) {\n        level = 0;\n      }\n\n      return Array.isArray(children) ? children.map(function (child) {\n        return _this.extractChild(child, level);\n      }) : [children, _this.extractChild(children, level)];\n    };\n\n    _this.extractChild = function (child, level) {\n      if (level === void 0) {\n        level = 0;\n      }\n\n      return React.isValidElement(child) ? __assign({}, child.props, {\n        width: child.props.width && parseInt(\"\" + child.props.width, 10),\n        level: level,\n        children: child.props.children && _this.extractColumns(child.props.children, level + 1)\n      }) : __assign({}, child, {\n        level: level,\n        children: child.children && _this.extractColumns(child.children, level + 1)\n      });\n    };\n\n    _this.getExportData = function (exportData) {\n      var result;\n\n      if (exportData) {\n        if (Array.isArray(exportData)) {\n          result = {\n            data: exportData\n          };\n        } else {\n          result = exportData;\n        }\n      } else {\n        result = {\n          data: _this.props.data,\n          group: _this.props.group\n        };\n      }\n\n      return result;\n    };\n\n    _this.save = _this.save.bind(_this);\n    _this.toDataURL = _this.toDataURL.bind(_this);\n    _this.workbookOptions = _this.workbookOptions.bind(_this);\n    return _this;\n  }\n  /**\n   * Saves the data to Excel.\n   *\n   * @param exportData - An optional parameter. Can be the data that will be exported or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n   * @param columns - An optional parameter. If present, it will be used instead of the columns prop or the child column components.\n   */\n\n\n  ExcelExport.prototype.save = function (exportData, columns) {\n    this.toDataURL(exportData, columns).then(this.saveFile);\n  };\n  /**\n   * Returns a promise which will be resolved with the file data URI.\n   *\n   * @param exportData - The optional data or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n   * @param externalColumns - The optional columns that will be used.\n   * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n   */\n\n\n  ExcelExport.prototype.toDataURL = function (exportData, columns) {\n    var options = isWorkbookOptions(exportData) ? exportData : this.workbookOptions(exportData, columns);\n    return toDataURL(options);\n  };\n  /**\n   * Based on the specified columns and data, returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n   *\n   * @param exportData - The optional data that will be exported.\n   * @param externalColumns - The optional columns that will be used.\n   * @returns {WorkbookOptions} - The workbook options.\n   */\n  // tslint:enable:max-line-length\n\n\n  ExcelExport.prototype.workbookOptions = function (exportData, externalColumns) {\n    var currentData = this.getExportData(exportData);\n    var children = this.props.children;\n    var gridColumns = children && children.type && children.type.displayName === 'KendoReactGrid' && children.props && React.Children.toArray(children.props.children);\n    var columns = this.extractColumns(gridColumns || externalColumns || this.props.columns || React.Children.toArray(children));\n    var options = workbookOptions({\n      columns: columns,\n      data: currentData.data,\n      group: currentData.group,\n      filterable: this.props.filterable,\n      creator: this.props.creator,\n      date: this.props.date,\n      dir: this.props.dir,\n      paddingCellOptions: this.props.paddingCellOptions,\n      headerPaddingCellOptions: this.props.headerPaddingCellOptions\n    });\n    return options;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.render = function () {\n    return this.props.children || null;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ExcelExport.propTypes = {\n    children: PropTypes.any,\n    columns: PropTypes.arrayOf(PropTypes.any),\n    creator: PropTypes.string,\n    data: PropTypes.any,\n    date: PropTypes.any,\n    filterable: PropTypes.bool,\n    fileName: PropTypes.string,\n    forceProxy: PropTypes.bool,\n    group: PropTypes.any,\n    headerPaddingCellOptions: PropTypes.any,\n    paddingCellOptions: PropTypes.any,\n    proxyURL: PropTypes.string,\n    dir: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  ExcelExport.defaultProps = {\n    fileName: 'Export.xlsx',\n    forceProxy: false\n  };\n  return ExcelExport;\n}(React.Component);\n\nexport default ExcelExport;","map":null,"metadata":{},"sourceType":"module"}