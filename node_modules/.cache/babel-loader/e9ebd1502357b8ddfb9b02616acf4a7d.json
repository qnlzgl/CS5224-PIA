{"ast":null,"code":"import _classCallCheck from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/dudu/Desktop/ReactApp/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/dudu/Desktop/ReactApp/my-app/src/RawText.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container, Form, FormGroup, Input, Button } from \"reactstrap\";\nimport Icon from \"react-fontawesome\";\nimport MainMenu from \"./MainMenu\";\nimport Loading from \"./Loading\";\nimport Results from \"./Results\";\n\nvar RawText =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RawText, _Component);\n\n  function RawText(props) {\n    var _this;\n\n    _classCallCheck(this, RawText);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RawText).call(this, props));\n    _this.state = {\n      rawTextContent: \"\",\n      wordCount: \"0\",\n      submitColor: \"secondary\",\n      submitDisallow: true,\n      fetchingData: false,\n      loadingmsg: \"\",\n      responseDataRecieved: false,\n      responseData: {}\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.tryAgain = _this.tryAgain.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // focusInput(component) {\n  //   if (component) {\n  //     ReactDOM.findDOMNode(component).focus();\n  //   }\n  // }\n  // handleChange(event) {\n  //   this.setState({\n  //     rawTextContent: event.target.value\n  //   });\n  //   let wordCount = event.target.value;\n  //   wordCount = wordCount.replace(/^\\s+|\\s+$/g, \"\");\n  //   if (wordCount === \"\") {\n  //     wordCount = 0;\n  //   } else {\n  //     wordCount = wordCount.split(/\\s+/).length;\n  //   }\n  //   if (wordCount === 0) {\n  //     this.setState({\n  //       submitDisallow: true,\n  //       submitColor: \"secondary\"\n  //     });\n  //   } else if (wordCount > 0) {\n  //     this.setState({\n  //       submitDisallow: false,\n  //       submitColor: \"success\"\n  //     });\n  //   }\n  // }\n  // handleSubmit(event) {\n  //   event.preventDefault();\n  //   this.setState({\n  //     fetchingData: true,\n  //     loadingmsg: \"Fetching Personality Insights\"\n  //   });\n  //   const formData = new FormData(event.target);\n  //   fetch(process.env.REACT_APP_WATSON_API_ENDPOINT, {\n  //     method: \"POST\",\n  //     body: formData\n  //   })\n  //     .then(function(response) {\n  //       return response.json();\n  //     })\n  //     .then(\n  //       function(data) {\n  //         if (data.error) {\n  //           this.setState(\n  //             {\n  //               fetchingData: false,\n  //               responseDataRecieved: false\n  //             },\n  //             function() {\n  //               alert(data.error + \". Please try again.\");\n  //             }\n  //           );\n  //         } else {\n  //           this.setState({\n  //             fetchingData: false,\n  //             responseData: data,\n  //             responseDataRecieved: true\n  //           });\n  //         }\n  //       }.bind(this)\n  //     );\n  // }\n  // tryAgain() {\n  //   this.setState({\n  //     rawTextContent: \"\",\n  //     wordCount: \"0\",\n  //     submitColor: \"secondary\",\n  //     submitDisallow: true,\n  //     fetchingData: false,\n  //     loadingmsg: \"\",\n  //     responseDataRecieved: false,\n  //     responseData: {}\n  //   });\n  // }\n\n\n  _createClass(RawText, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(MainMenu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RawText;\n}(Component);\n\nexport default RawText;","map":{"version":3,"sources":["/Users/dudu/Desktop/ReactApp/my-app/src/RawText.js"],"names":["React","Component","ReactDOM","Container","Form","FormGroup","Input","Button","Icon","MainMenu","Loading","Results","RawText","props","state","rawTextContent","wordCount","submitColor","submitDisallow","fetchingData","loadingmsg","responseDataRecieved","responseData","handleChange","bind","handleSubmit","tryAgain"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,KAArC,EAA4CC,MAA5C,QAA0D,YAA1D;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAEMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE,EADL;AAEXC,MAAAA,SAAS,EAAE,GAFA;AAGXC,MAAAA,WAAW,EAAE,WAHF;AAIXC,MAAAA,cAAc,EAAE,IAJL;AAKXC,MAAAA,YAAY,EAAE,KALH;AAMXC,MAAAA,UAAU,EAAE,EAND;AAOXC,MAAAA,oBAAoB,EAAE,KAPX;AAQXC,MAAAA,YAAY,EAAE;AARH,KAAb;AAUA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AACA,UAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,uDAAhB;AAdiB;AAelB,G,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6BAES;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAmDD;;;;EA5JmBvB,S;;AA+JtB,eAAeW,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container, Form, FormGroup, Input, Button } from \"reactstrap\";\nimport Icon from \"react-fontawesome\";\nimport MainMenu from \"./MainMenu\";\nimport Loading from \"./Loading\";\nimport Results from \"./Results\";\n\nclass RawText extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rawTextContent: \"\",\n      wordCount: \"0\",\n      submitColor: \"secondary\",\n      submitDisallow: true,\n      fetchingData: false,\n      loadingmsg: \"\",\n      responseDataRecieved: false,\n      responseData: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.tryAgain = this.tryAgain.bind(this);\n  }\n\n  // focusInput(component) {\n  //   if (component) {\n  //     ReactDOM.findDOMNode(component).focus();\n  //   }\n  // }\n\n  // handleChange(event) {\n  //   this.setState({\n  //     rawTextContent: event.target.value\n  //   });\n\n  //   let wordCount = event.target.value;\n  //   wordCount = wordCount.replace(/^\\s+|\\s+$/g, \"\");\n\n  //   if (wordCount === \"\") {\n  //     wordCount = 0;\n  //   } else {\n  //     wordCount = wordCount.split(/\\s+/).length;\n  //   }\n\n  //   if (wordCount === 0) {\n  //     this.setState({\n  //       submitDisallow: true,\n  //       submitColor: \"secondary\"\n  //     });\n  //   } else if (wordCount > 0) {\n  //     this.setState({\n  //       submitDisallow: false,\n  //       submitColor: \"success\"\n  //     });\n  //   }\n  // }\n\n  // handleSubmit(event) {\n  //   event.preventDefault();\n\n  //   this.setState({\n  //     fetchingData: true,\n  //     loadingmsg: \"Fetching Personality Insights\"\n  //   });\n\n  //   const formData = new FormData(event.target);\n\n  //   fetch(process.env.REACT_APP_WATSON_API_ENDPOINT, {\n  //     method: \"POST\",\n  //     body: formData\n  //   })\n  //     .then(function(response) {\n  //       return response.json();\n  //     })\n  //     .then(\n  //       function(data) {\n  //         if (data.error) {\n  //           this.setState(\n  //             {\n  //               fetchingData: false,\n  //               responseDataRecieved: false\n  //             },\n  //             function() {\n  //               alert(data.error + \". Please try again.\");\n  //             }\n  //           );\n  //         } else {\n  //           this.setState({\n  //             fetchingData: false,\n  //             responseData: data,\n  //             responseDataRecieved: true\n  //           });\n  //         }\n  //       }.bind(this)\n  //     );\n  // }\n\n  // tryAgain() {\n  //   this.setState({\n  //     rawTextContent: \"\",\n  //     wordCount: \"0\",\n  //     submitColor: \"secondary\",\n  //     submitDisallow: true,\n  //     fetchingData: false,\n  //     loadingmsg: \"\",\n  //     responseDataRecieved: false,\n  //     responseData: {}\n  //   });\n  // }\n\n  render() {\n    return (\n      <div>\n        <MainMenu />\n{/*  \n        {this.state.fetchingData && (\n          <Loading loadingmsg={this.state.loadingmsg} />\n        )}\n\n\n        <div className=\"container__raw-text hidden-load animated fadeIn\">\n          {!this.state.responseDataRecieved && (\n            <Container className=\"raw-text-data-entry\">\n              <h1 className=\"page-heading text-center\">\n                <Icon name=\"font\" />\n              </h1>\n              <Form onSubmit={this.handleSubmit}>\n                <FormGroup role=\"form\">\n                  <Input\n                    type=\"textarea\"\n                    placeholder=\"You can enter as little as 100 words, but for a more accurate analysis, you need more words. Watson requires a minimum of 600, preferably 1,200 or more, to compute statistically significant estimates.\"\n                    name=\"raw-text-content\"\n                    id=\"raw-text-content\"\n                    onChange={this.handleChange}\n                    ref={this.focusInput}\n                  />\n                </FormGroup>\n\n                <Button\n                  type=\"submit\"\n                  disabled={this.state.submitDisallow}\n                  size=\"lg\"\n                  color={this.state.submitColor}\n                >\n                  Analyse\n                </Button>\n              </Form>\n            </Container>\n          )}\n\n          {this.state.responseDataRecieved && (\n            <Results\n              resultData={this.state.responseData}\n              rawText={this.state.rawTextContent}\n              tryAgain={this.tryAgain}\n            />\n          )}\n        </div>\n*/}\n        \n      </div>\n    );\n  }\n}\n\nexport default RawText;\n"]},"metadata":{},"sourceType":"module"}