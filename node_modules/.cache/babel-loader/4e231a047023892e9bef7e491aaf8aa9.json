{"ast":null,"code":"import map from './utils/map';\nimport createZip from './utils/create-zip';\nimport IntlService from './services/intl-service';\nimport dateToSerial from './utils/time';\nvar DATA_URL_PREFIX = \"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,\";\nvar DATA_URL_OPTIONS = {\n  compression: \"DEFLATE\",\n  type: \"base64\"\n};\n/* eslint-disable key-spacing, no-arrow-condition, indent, no-nested-ternary, consistent-return */\n\nfunction toDataURI(content) {\n  return DATA_URL_PREFIX + content;\n}\n\nfunction indexOf(thing, array) {\n  return array.indexOf(thing);\n}\n\nvar parseJSON = JSON.parse.bind(JSON);\n\nfunction ESC(val) {\n  return String(val).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\\"/g, \"&quot;\").replace(/\\'/g, \"&#39;\");\n}\n\nfunction repeat(count, func) {\n  var str = \"\";\n\n  for (var i = 0; i < count; ++i) {\n    str += func(i);\n  }\n\n  return str;\n}\n\nfunction foreach(arr, func) {\n  var str = \"\";\n\n  for (var i = 0; i < arr.length; ++i) {\n    str += func(arr[i], i);\n  }\n\n  return str;\n}\n\nvar XMLHEAD = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r';\nvar RELS = XMLHEAD + \"\\n            <Relationships xmlns=\\\"http://schemas.openxmlformats.org/package/2006/relationships\\\">\\n               <Relationship Id=\\\"rId3\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\\\" Target=\\\"docProps/app.xml\\\"/>\\n               <Relationship Id=\\\"rId2\\\" Type=\\\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\\\" Target=\\\"docProps/core.xml\\\"/>\\n               <Relationship Id=\\\"rId1\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\\\" Target=\\\"xl/workbook.xml\\\"/>\\n            </Relationships>\";\n\nvar CORE = function CORE(ref) {\n  var creator = ref.creator;\n  var lastModifiedBy = ref.lastModifiedBy;\n  var created = ref.created;\n  var modified = ref.modified;\n  return XMLHEAD + \"\\n <cp:coreProperties xmlns:cp=\\\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\\\"\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\" xmlns:dcterms=\\\"http://purl.org/dc/terms/\\\"\\n   xmlns:dcmitype=\\\"http://purl.org/dc/dcmitype/\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\n   <dc:creator>\" + ESC(creator) + \"</dc:creator>\\n   <cp:lastModifiedBy>\" + ESC(lastModifiedBy) + \"</cp:lastModifiedBy>\\n   <dcterms:created xsi:type=\\\"dcterms:W3CDTF\\\">\" + ESC(created) + \"</dcterms:created>\\n   <dcterms:modified xsi:type=\\\"dcterms:W3CDTF\\\">\" + ESC(modified) + \"</dcterms:modified>\\n</cp:coreProperties>\";\n};\n\nvar APP = function APP(ref) {\n  var sheets = ref.sheets;\n  return XMLHEAD + \"\\n<Properties xmlns=\\\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\\\" xmlns:vt=\\\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\\\">\\n  <Application>Microsoft Excel</Application>\\n  <DocSecurity>0</DocSecurity>\\n  <ScaleCrop>false</ScaleCrop>\\n  <HeadingPairs>\\n    <vt:vector size=\\\"2\\\" baseType=\\\"variant\\\">\\n      <vt:variant>\\n        <vt:lpstr>Worksheets</vt:lpstr>\\n      </vt:variant>\\n      <vt:variant>\\n        <vt:i4>\" + sheets.length + \"</vt:i4>\\n      </vt:variant>\\n    </vt:vector>\\n  </HeadingPairs>\\n  <TitlesOfParts>\\n    <vt:vector size=\\\"\" + sheets.length + \"\\\" baseType=\\\"lpstr\\\">\" + foreach(sheets, function (sheet, i) {\n    return sheet.options.title ? \"<vt:lpstr>\" + ESC(sheet.options.title) + \"</vt:lpstr>\" : \"<vt:lpstr>Sheet\" + (i + 1) + \"</vt:lpstr>\";\n  }) + \"</vt:vector>\\n  </TitlesOfParts>\\n  <LinksUpToDate>false</LinksUpToDate>\\n  <SharedDoc>false</SharedDoc>\\n  <HyperlinksChanged>false</HyperlinksChanged>\\n  <AppVersion>14.0300</AppVersion>\\n</Properties>\";\n};\n\nvar CONTENT_TYPES = function CONTENT_TYPES(ref) {\n  var count = ref.count;\n  return XMLHEAD + \"\\n<Types xmlns=\\\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\\n  <Default Extension=\\\"rels\\\" ContentType=\\\"application/vnd.openxmlformats-package.relationships+xml\\\" />\\n  <Default Extension=\\\"xml\\\" ContentType=\\\"application/xml\\\" />\\n  <Override PartName=\\\"/xl/workbook.xml\\\" ContentType=\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\\\" />\\n  <Override PartName=\\\"/xl/styles.xml\\\" ContentType=\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\\\"/>\\n  <Override PartName=\\\"/xl/sharedStrings.xml\\\" ContentType=\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\\\"/>\\n  \" + repeat(count, function (idx) {\n    return \"<Override PartName=\\\"/xl/worksheets/sheet\" + (idx + 1) + \".xml\\\" ContentType=\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\\\" />\";\n  }) + \"\\n  <Override PartName=\\\"/docProps/core.xml\\\" ContentType=\\\"application/vnd.openxmlformats-package.core-properties+xml\\\" />\\n  <Override PartName=\\\"/docProps/app.xml\\\" ContentType=\\\"application/vnd.openxmlformats-officedocument.extended-properties+xml\\\" />\\n</Types>\";\n};\n\nvar WORKBOOK = function WORKBOOK(ref) {\n  var sheets = ref.sheets;\n  var filterNames = ref.filterNames;\n  var userNames = ref.userNames;\n  return XMLHEAD + \"\\n<workbook xmlns=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\" xmlns:r=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\\\">\\n  <fileVersion appName=\\\"xl\\\" lastEdited=\\\"5\\\" lowestEdited=\\\"5\\\" rupBuild=\\\"9303\\\" />\\n  <workbookPr defaultThemeVersion=\\\"124226\\\" />\\n  <bookViews>\\n    <workbookView xWindow=\\\"240\\\" yWindow=\\\"45\\\" windowWidth=\\\"18195\\\" windowHeight=\\\"7995\\\" />\\n  </bookViews>\\n  <sheets>\\n  \" + foreach(sheets, function (ref, i) {\n    var options = ref.options;\n    var name = options.name || options.title || \"Sheet\" + (i + 1);\n    return \"<sheet name=\\\"\" + ESC(name) + \"\\\" sheetId=\\\"\" + (i + 1) + \"\\\" r:id=\\\"rId\" + (i + 1) + \"\\\" />\";\n  }) + \"\\n  </sheets>\\n  \" + (filterNames.length || userNames.length ? \"\\n    <definedNames>\\n      \" + foreach(filterNames, function (f) {\n    return \"\\n         <definedName name=\\\"_xlnm._FilterDatabase\\\" hidden=\\\"1\\\" localSheetId=\\\"\" + f.localSheetId + \"\\\">\" + ESC(f.name) + \"!\" + ESC(f.from) + \":\" + ESC(f.to) + \"</definedName>\";\n  }) + \"\\n      \" + foreach(userNames, function (f) {\n    return \"\\n         <definedName name=\\\"\" + f.name + \"\\\" hidden=\\\"\" + (f.hidden ? 1 : 0) + \"\\\" \" + (f.localSheetId != null ? \"localSheetId=\\\"\" + f.localSheetId + \"\\\"\" : '') + \">\" + ESC(f.value) + \"</definedName>\";\n  }) + \"\\n    </definedNames>\" : '') + \"\\n  <calcPr fullCalcOnLoad=\\\"1\\\" calcId=\\\"145621\\\" />\\n</workbook>\";\n};\n\nvar WORKSHEET = function WORKSHEET(ref) {\n  var frozenColumns = ref.frozenColumns;\n  var frozenRows = ref.frozenRows;\n  var columns = ref.columns;\n  var defaults = ref.defaults;\n  var data = ref.data;\n  var index = ref.index;\n  var mergeCells = ref.mergeCells;\n  var autoFilter = ref.autoFilter;\n  var filter = ref.filter;\n  var showGridLines = ref.showGridLines;\n  var hyperlinks = ref.hyperlinks;\n  var validations = ref.validations;\n  var defaultCellStyleId = ref.defaultCellStyleId;\n  var rtl = ref.rtl;\n  return XMLHEAD + \"\\n<worksheet xmlns=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\" xmlns:mc=\\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\\" xmlns:r=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\\\" xmlns:x14ac=\\\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\\\" mc:Ignorable=\\\"x14ac\\\">\\n   <dimension ref=\\\"A1\\\" />\\n\\n   <sheetViews>\\n     <sheetView \" + (rtl ? 'rightToLeft=\"1\"' : '') + \" \" + (index === 0 ? 'tabSelected=\"1\"' : '') + \" workbookViewId=\\\"0\\\" \" + (showGridLines === false ? 'showGridLines=\"0\"' : '') + \">\\n     \" + (frozenRows || frozenColumns ? \"\\n       <pane state=\\\"frozen\\\"\\n         \" + (frozenColumns ? \"xSplit=\\\"\" + frozenColumns + \"\\\"\" : '') + \"\\n         \" + (frozenRows ? \"ySplit=\\\"\" + frozenRows + \"\\\"\" : '') + \"\\n         topLeftCell=\\\"\" + (String.fromCharCode(65 + (frozenColumns || 0)) + ((frozenRows || 0) + 1)) + \"\\\"\\n       />\" : '') + \"\\n     </sheetView>\\n   </sheetViews>\\n\\n   <sheetFormatPr x14ac:dyDescent=\\\"0.25\\\" customHeight=\\\"1\\\" defaultRowHeight=\\\"\" + (defaults.rowHeight ? defaults.rowHeight * 0.75 : 15) + \"\\\"\\n     \" + (defaults.columnWidth ? \"defaultColWidth=\\\"\" + toWidth(defaults.columnWidth) + \"\\\"\" : '') + \" />\\n\\n   \" + (defaultCellStyleId != null || columns && columns.length > 0 ? \"\\n     <cols>\\n       \" + (!columns || !columns.length ? \"\\n         <col min=\\\"1\\\" max=\\\"16384\\\" style=\\\"\" + defaultCellStyleId + \"\\\"\\n              \" + (defaults.columnWidth ? \"width=\\\"\" + toWidth(defaults.columnWidth) + \"\\\"\" : '') + \" /> \" : '') + \"\\n       \" + foreach(columns, function (column, ci) {\n    var columnIndex = typeof column.index === \"number\" ? column.index + 1 : ci + 1;\n\n    if (column.width === 0) {\n      return \"<col \" + (defaultCellStyleId != null ? \"style=\\\"\" + defaultCellStyleId + \"\\\"\" : '') + \"\\n                        min=\\\"\" + columnIndex + \"\\\" max=\\\"\" + columnIndex + \"\\\" hidden=\\\"1\\\" customWidth=\\\"1\\\" />\";\n    }\n\n    return \"<col \" + (defaultCellStyleId != null ? \"style=\\\"\" + defaultCellStyleId + \"\\\"\" : '') + \"\\n                      min=\\\"\" + columnIndex + \"\\\" max=\\\"\" + columnIndex + \"\\\" customWidth=\\\"1\\\"\\n                      \" + (column.autoWidth ? \"width=\\\"\" + (column.width * 7 + 5) / 7 * 256 / 256 + \"\\\" bestFit=\\\"1\\\"\" : \"width=\\\"\" + toWidth(column.width) + \"\\\"\") + \" />\";\n  }) + \"\\n     </cols>\" : '') + \"\\n\\n   <sheetData>\\n     \" + foreach(data, function (row, ri) {\n    var rowIndex = typeof row.index === \"number\" ? row.index + 1 : ri + 1;\n    return \"\\n         <row r=\\\"\" + rowIndex + \"\\\" x14ac:dyDescent=\\\"0.25\\\"\\n              \" + (row.level ? \"outlineLevel=\\\"\" + row.level + \"\\\"\" : '') + \"\\n              \" + (row.height === 0 ? 'hidden=\"1\"' : row.height ? \"ht=\\\"\" + toHeight(row.height) + \"\\\" customHeight=\\\"1\\\"\" : \"\") + \">\\n           \" + foreach(row.data, function (cell) {\n      return \"\\n             <c r=\\\"\" + cell.ref + \"\\\" \" + (cell.style ? \"s=\\\"\" + cell.style + \"\\\"\" : '') + \" \" + (cell.type ? \"t=\\\"\" + cell.type + \"\\\"\" : '') + \">\\n               \" + (cell.formula != null ? writeFormula(cell.formula) : '') + \"\\n               \" + (cell.value != null ? \"<v>\" + ESC(cell.value) + \"</v>\" : '') + \"\\n             </c>\";\n    }) + \"\\n         </row>\\n       \";\n  }) + \"\\n   </sheetData>\\n\\n   \" + (autoFilter ? \"<autoFilter ref=\\\"\" + autoFilter.from + \":\" + autoFilter.to + \"\\\"/>\" : filter ? spreadsheetFilters(filter) : '') + \"\\n\\n   \" + (mergeCells.length ? \"\\n     <mergeCells count=\\\"\" + mergeCells.length + \"\\\">\\n       \" + foreach(mergeCells, function (ref) {\n    return \"<mergeCell ref=\\\"\" + ref + \"\\\"/>\";\n  }) + \"\\n     </mergeCells>\" : '') + \"\\n\\n   \" + (validations.length ? \"\\n     <dataValidations>\\n       \" + foreach(validations, function (val) {\n    return \"\\n         <dataValidation sqref=\\\"\" + val.sqref.join(\" \") + \"\\\"\\n                         showErrorMessage=\\\"\" + val.showErrorMessage + \"\\\"\\n                         type=\\\"\" + ESC(val.type) + \"\\\"\\n                         \" + (val.type !== \"list\" ? \"operator=\\\"\" + ESC(val.operator) + \"\\\"\" : '') + \"\\n                         allowBlank=\\\"\" + val.allowBlank + \"\\\"\\n                         showDropDown=\\\"\" + val.showDropDown + \"\\\"\\n                         \" + (val.error ? \"error=\\\"\" + ESC(val.error) + \"\\\"\" : '') + \"\\n                         \" + (val.errorTitle ? \"errorTitle=\\\"\" + ESC(val.errorTitle) + \"\\\"\" : '') + \">\\n           \" + (val.formula1 ? \"<formula1>\" + ESC(val.formula1) + \"</formula1>\" : '') + \"\\n           \" + (val.formula2 ? \"<formula2>\" + ESC(val.formula2) + \"</formula2>\" : '') + \"\\n         </dataValidation>\";\n  }) + \"\\n     </dataValidations>\" : '') + \"\\n\\n   \" + (hyperlinks.length ? \"\\n     <hyperlinks>\\n       \" + foreach(hyperlinks, function (link, hi) {\n    return \"\\n         <hyperlink ref=\\\"\" + link.ref + \"\\\" r:id=\\\"rId\" + hi + \"\\\"/>\";\n  }) + \"\\n     </hyperlinks>\" : '') + \"\\n\\n   <pageMargins left=\\\"0.7\\\" right=\\\"0.7\\\" top=\\\"0.75\\\" bottom=\\\"0.75\\\" header=\\\"0.3\\\" footer=\\\"0.3\\\" />\\n</worksheet>\";\n};\n\nvar WORKBOOK_RELS = function WORKBOOK_RELS(ref) {\n  var count = ref.count;\n  return XMLHEAD + \"\\n<Relationships xmlns=\\\"http://schemas.openxmlformats.org/package/2006/relationships\\\">\\n  \" + repeat(count, function (idx) {\n    return \"\\n    <Relationship Id=\\\"rId\" + (idx + 1) + \"\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\\\" Target=\\\"worksheets/sheet\" + (idx + 1) + \".xml\\\" />\";\n  }) + \"\\n  <Relationship Id=\\\"rId\" + (count + 1) + \"\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\\\" Target=\\\"styles.xml\\\" />\\n  <Relationship Id=\\\"rId\" + (count + 2) + \"\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\\\" Target=\\\"sharedStrings.xml\\\" />\\n</Relationships>\";\n};\n\nvar WORKSHEET_RELS = function WORKSHEET_RELS(ref) {\n  var hyperlinks = ref.hyperlinks;\n  return XMLHEAD + \"\\n<Relationships xmlns=\\\"http://schemas.openxmlformats.org/package/2006/relationships\\\">\\n  \" + foreach(hyperlinks, function (link, i) {\n    return \"\\n    <Relationship Id=\\\"rId\" + i + \"\\\" Type=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\\\" Target=\\\"\" + ESC(link.target) + \"\\\" TargetMode=\\\"External\\\" />\";\n  }) + \"\\n</Relationships>\";\n};\n\nvar SHARED_STRINGS = function SHARED_STRINGS(ref) {\n  var count = ref.count;\n  var uniqueCount = ref.uniqueCount;\n  var indexes = ref.indexes;\n  return XMLHEAD + \"\\n<sst xmlns=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\" count=\\\"\" + count + \"\\\" uniqueCount=\\\"\" + uniqueCount + \"\\\">\\n  \" + foreach(Object.keys(indexes), function (index) {\n    return \"\\n    <si><t xml:space=\\\"preserve\\\">\" + ESC(index.substring(1)) + \"</t></si>\";\n  }) + \"\\n</sst>\";\n};\n\nvar STYLES = function STYLES(ref) {\n  var formats = ref.formats;\n  var fonts = ref.fonts;\n  var fills = ref.fills;\n  var borders = ref.borders;\n  var styles = ref.styles;\n  return XMLHEAD + \"\\n<styleSheet\\n    xmlns=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\"\\n    xmlns:mc=\\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\\"\\n    mc:Ignorable=\\\"x14ac\\\"\\n    xmlns:x14ac=\\\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\\\">\\n  <numFmts count=\\\"\" + formats.length + \"\\\">\\n  \" + foreach(formats, function (format, fi) {\n    return \"\\n    <numFmt formatCode=\\\"\" + ESC(format.format) + \"\\\" numFmtId=\\\"\" + (165 + fi) + \"\\\" />\";\n  }) + \"\\n  </numFmts>\\n  <fonts count=\\\"\" + (fonts.length + 1) + \"\\\" x14ac:knownFonts=\\\"1\\\">\\n    <font>\\n       <sz val=\\\"11\\\" />\\n       <color theme=\\\"1\\\" />\\n       <name val=\\\"Calibri\\\" />\\n       <family val=\\\"2\\\" />\\n       <scheme val=\\\"minor\\\" />\\n    </font>\\n    \" + foreach(fonts, function (font) {\n    return \"\\n    <font>\\n      <sz val=\\\"\" + (font.fontSize || 11) + \"\\\" />\\n      \" + (font.bold ? '<b/>' : '') + \"\\n      \" + (font.italic ? '<i/>' : '') + \"\\n      \" + (font.underline ? '<u/>' : '') + \"\\n      \" + (font.color ? \"<color rgb=\\\"\" + ESC(font.color) + \"\\\" />\" : '<color theme=\"1\" />') + \"\\n      \" + (font.fontFamily ? \"\\n        <name val=\\\"\" + ESC(font.fontFamily) + \"\\\" />\\n        <family val=\\\"2\\\" />\\n      \" : \"\\n        <name val=\\\"Calibri\\\" />\\n        <family val=\\\"2\\\" />\\n        <scheme val=\\\"minor\\\" />\\n      \") + \"\\n    </font>\";\n  }) + \"\\n  </fonts>\\n  <fills count=\\\"\" + (fills.length + 2) + \"\\\">\\n      <fill><patternFill patternType=\\\"none\\\"/></fill>\\n      <fill><patternFill patternType=\\\"gray125\\\"/></fill>\\n    \" + foreach(fills, function (fill) {\n    return \"\\n      \" + (fill.background ? \"\\n        <fill>\\n          <patternFill patternType=\\\"solid\\\">\\n              <fgColor rgb=\\\"\" + ESC(fill.background) + \"\\\"/>\\n          </patternFill>\\n        </fill>\\n      \" : '');\n  }) + \"\\n  </fills>\\n  <borders count=\\\"\" + (borders.length + 1) + \"\\\">\\n    <border><left/><right/><top/><bottom/><diagonal/></border>\\n    \" + foreach(borders, borderTemplate) + \"\\n  </borders>\\n  <cellStyleXfs count=\\\"1\\\">\\n    <xf borderId=\\\"0\\\" fillId=\\\"0\\\" fontId=\\\"0\\\" />\\n  </cellStyleXfs>\\n  <cellXfs count=\\\"\" + (styles.length + 1) + \"\\\">\\n    <xf numFmtId=\\\"0\\\" fontId=\\\"0\\\" fillId=\\\"0\\\" borderId=\\\"0\\\" xfId=\\\"0\\\" />\\n    \" + foreach(styles, function (style) {\n    return \"\\n      <xf xfId=\\\"0\\\"\\n          \" + (style.fontId ? \"fontId=\\\"\" + style.fontId + \"\\\" applyFont=\\\"1\\\"\" : '') + \"\\n          \" + (style.fillId ? \"fillId=\\\"\" + style.fillId + \"\\\" applyFill=\\\"1\\\"\" : '') + \"\\n          \" + (style.numFmtId ? \"numFmtId=\\\"\" + style.numFmtId + \"\\\" applyNumberFormat=\\\"1\\\"\" : '') + \"\\n          \" + (style.textAlign || style.verticalAlign || style.wrap ? 'applyAlignment=\"1\"' : '') + \"\\n          \" + (style.borderId ? \"borderId=\\\"\" + style.borderId + \"\\\" applyBorder=\\\"1\\\"\" : '') + \">\\n        \" + (style.textAlign || style.verticalAlign || style.wrap ? \"\\n        <alignment\\n          \" + (style.textAlign ? \"horizontal=\\\"\" + ESC(style.textAlign) + \"\\\"\" : '') + \"\\n          \" + (style.verticalAlign ? \"vertical=\\\"\" + ESC(style.verticalAlign) + \"\\\"\" : '') + \"\\n          \" + (style.indent ? \"indent=\\\"\" + ESC(style.indent) + \"\\\"\" : '') + \"\\n          \" + (style.wrap ? 'wrapText=\"1\"' : '') + \" />\\n        \" : '') + \"\\n      </xf>\\n    \";\n  }) + \"\\n  </cellXfs>\\n  <cellStyles count=\\\"1\\\">\\n    <cellStyle name=\\\"Normal\\\" xfId=\\\"0\\\" builtinId=\\\"0\\\"/>\\n  </cellStyles>\\n  <dxfs count=\\\"0\\\" />\\n  <tableStyles count=\\\"0\\\" defaultTableStyle=\\\"TableStyleMedium2\\\" defaultPivotStyle=\\\"PivotStyleMedium9\\\" />\\n</styleSheet>\";\n};\n\nfunction writeFormula(formula) {\n  if (typeof formula == \"string\") {\n    return \"<f>\" + ESC(formula) + \"</f>\";\n  } // array formulas\n\n\n  return \"<f t=\\\"array\\\" ref=\\\"\" + formula.ref + \"\\\">\" + ESC(formula.src) + \"</f>\";\n}\n\nfunction numChar(colIndex) {\n  var letter = Math.floor(colIndex / 26) - 1;\n  return (letter >= 0 ? numChar(letter) : \"\") + String.fromCharCode(65 + colIndex % 26);\n}\n\nfunction ref(rowIndex, colIndex) {\n  return numChar(colIndex) + (rowIndex + 1);\n}\n\nfunction $ref(rowIndex, colIndex) {\n  return \"$\" + numChar(colIndex) + \"$\" + (rowIndex + 1);\n}\n\nfunction filterRowIndex(options) {\n  var frozenRows = options.frozenRows || (options.freezePane || {}).rowSplit || 1;\n  return frozenRows - 1;\n}\n\nfunction toWidth(px) {\n  var maximumDigitWidth = 7;\n  return px / maximumDigitWidth - Math.floor(128 / maximumDigitWidth) / 256;\n}\n\nfunction toHeight(px) {\n  return px * 0.75;\n}\n\nfunction stripFunnyChars(value) {\n  return String(value).replace(/[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F]/g, \"\") // leave CRLF in\n  .replace(/\\r?\\n/g, \"\\r\\n\"); // make sure LF is preceded by CR\n}\n\nvar Worksheet = function Worksheet(options, sharedStrings, styles, borders) {\n  this.options = options;\n  this._strings = sharedStrings;\n  this._styles = styles;\n  this._borders = borders;\n  this._validations = {};\n};\n\nWorksheet.prototype.relsToXML = function relsToXML() {\n  var hyperlinks = this.options.hyperlinks || [];\n\n  if (!hyperlinks.length) {\n    return \"\";\n  }\n\n  return WORKSHEET_RELS({\n    hyperlinks: hyperlinks\n  });\n};\n\nWorksheet.prototype.toXML = function toXML(index) {\n  var this$1 = this;\n  var mergeCells = this.options.mergedCells || [];\n  var rows = this.options.rows || [];\n  var data = inflate(rows, mergeCells);\n\n  this._readCells(data);\n\n  var autoFilter = this.options.filter;\n  var filter;\n\n  if (autoFilter && typeof autoFilter.from === \"number\" && typeof autoFilter.to === \"number\") {\n    // Grid enables auto filter\n    autoFilter = {\n      from: ref(filterRowIndex(this.options), autoFilter.from),\n      to: ref(filterRowIndex(this.options), autoFilter.to)\n    };\n  } else if (autoFilter && autoFilter.ref && autoFilter.columns) {\n    // this is probably from the Spreadsheet\n    filter = autoFilter;\n    autoFilter = null;\n  }\n\n  var validations = [];\n\n  for (var i in this$1._validations) {\n    if (Object.prototype.hasOwnProperty.call(this$1._validations, i)) {\n      validations.push(this$1._validations[i]);\n    }\n  }\n\n  var defaultCellStyleId = null;\n\n  if (this.options.defaultCellStyle) {\n    defaultCellStyleId = this._lookupStyle(this.options.defaultCellStyle);\n  }\n\n  var freezePane = this.options.freezePane || {};\n  var defaults = this.options.defaults || {};\n  return WORKSHEET({\n    frozenColumns: this.options.frozenColumns || freezePane.colSplit,\n    frozenRows: this.options.frozenRows || freezePane.rowSplit,\n    columns: this.options.columns,\n    defaults: defaults,\n    data: data,\n    index: index,\n    mergeCells: mergeCells,\n    autoFilter: autoFilter,\n    filter: filter,\n    showGridLines: this.options.showGridLines,\n    hyperlinks: this.options.hyperlinks || [],\n    validations: validations,\n    defaultCellStyleId: defaultCellStyleId,\n    rtl: this.options.rtl !== undefined ? this.options.rtl : defaults.rtl\n  });\n};\n\nWorksheet.prototype._lookupString = function _lookupString(value) {\n  var key = \"$\" + value;\n  var index = this._strings.indexes[key];\n  var result;\n\n  if (index !== undefined) {\n    result = index;\n  } else {\n    result = this._strings.indexes[key] = this._strings.uniqueCount;\n    this._strings.uniqueCount++;\n  }\n\n  this._strings.count++;\n  return result;\n};\n\nWorksheet.prototype._lookupStyle = function _lookupStyle(style) {\n  var json = JSON.stringify(style);\n\n  if (json === \"{}\") {\n    return 0;\n  }\n\n  var index = indexOf(json, this._styles);\n\n  if (index < 0) {\n    index = this._styles.push(json) - 1;\n  } // There is one default style\n\n\n  return index + 1;\n};\n\nWorksheet.prototype._lookupBorder = function _lookupBorder(border) {\n  var json = JSON.stringify(border);\n\n  if (json === \"{}\") {\n    return;\n  }\n\n  var index = indexOf(json, this._borders);\n\n  if (index < 0) {\n    index = this._borders.push(json) - 1;\n  } // There is one default border\n\n\n  return index + 1;\n};\n\nWorksheet.prototype._readCells = function _readCells(rowData) {\n  var this$1 = this;\n\n  for (var i = 0; i < rowData.length; i++) {\n    var row = rowData[i];\n    var cells = row.cells;\n    row.data = [];\n\n    for (var j = 0; j < cells.length; j++) {\n      var cellData = this$1._cell(cells[j], row.index, j);\n\n      if (cellData) {\n        row.data.push(cellData);\n      }\n    }\n  }\n};\n\nWorksheet.prototype._cell = function _cell(data, rowIndex, cellIndex) {\n  if (!data || data === EMPTY_CELL) {\n    return null;\n  }\n\n  var value = data.value;\n  var border = {};\n\n  if (data.borderLeft) {\n    border.left = data.borderLeft;\n  }\n\n  if (data.borderRight) {\n    border.right = data.borderRight;\n  }\n\n  if (data.borderTop) {\n    border.top = data.borderTop;\n  }\n\n  if (data.borderBottom) {\n    border.bottom = data.borderBottom;\n  }\n\n  border = this._lookupBorder(border);\n  var defStyle = this.options.defaultCellStyle || {};\n  var style = {\n    borderId: border\n  };\n\n  (function (add) {\n    add(\"color\");\n    add(\"background\");\n    add(\"bold\");\n    add(\"italic\");\n    add(\"underline\");\n\n    if (!add(\"fontFamily\")) {\n      add(\"fontName\", \"fontFamily\");\n    }\n\n    add(\"fontSize\");\n    add(\"format\");\n\n    if (!add(\"textAlign\")) {\n      add(\"hAlign\", \"textAlign\");\n    }\n\n    if (!add(\"verticalAlign\")) {\n      add(\"vAlign\", \"verticalAlign\");\n    }\n\n    add(\"wrap\");\n    add(\"indent\");\n  })(function (prop, target) {\n    var val = data[prop];\n\n    if (val === undefined) {\n      val = defStyle[prop];\n    }\n\n    if (val !== undefined) {\n      style[target || prop] = val;\n      return true;\n    }\n  });\n\n  var columns = this.options.columns || [];\n  var column = columns[cellIndex];\n  var type = typeof value;\n\n  if (column && column.autoWidth) {\n    var displayValue = value; // XXX: let's not bring kendo.toString in only for this.\n    //    better wait until the spreadsheet engine is available as a separate\n    //    component, then we can use a real Excel-like formatter.\n    //\n\n    if (type === \"number\") {\n      // kendo.toString will not behave exactly like the Excel format\n      // Still, it's the best we have available for estimating the character count.\n      displayValue = IntlService.toString(value, data.format);\n    }\n\n    column.width = Math.max(column.width || 0, String(displayValue).length);\n  }\n\n  if (type === \"string\") {\n    value = stripFunnyChars(value);\n    value = this._lookupString(value);\n    type = \"s\";\n  } else if (type === \"number\") {\n    type = \"n\";\n  } else if (type === \"boolean\") {\n    type = \"b\";\n    value = Number(value);\n  } else if (value && value.getTime) {\n    type = null;\n    value = dateToSerial(value);\n\n    if (!style.format) {\n      style.format = \"mm-dd-yy\";\n    }\n  } else {\n    type = null;\n    value = null;\n  }\n\n  style = this._lookupStyle(style);\n  var cellName = ref(rowIndex, cellIndex);\n\n  if (data.validation) {\n    this._addValidation(data.validation, cellName);\n  }\n\n  return {\n    value: value,\n    formula: data.formula,\n    type: type,\n    style: style,\n    ref: cellName\n  };\n};\n\nWorksheet.prototype._addValidation = function _addValidation(v, ref) {\n  var tmp = {\n    showErrorMessage: v.type === \"reject\" ? 1 : 0,\n    formula1: v.from,\n    formula2: v.to,\n    type: MAP_EXCEL_TYPE[v.dataType] || v.dataType,\n    operator: MAP_EXCEL_OPERATOR[v.comparerType] || v.comparerType,\n    allowBlank: v.allowNulls ? 1 : 0,\n    showDropDown: v.showButton ? 0 : 1,\n    // LOL, Excel!\n    error: v.messageTemplate,\n    errorTitle: v.titleTemplate\n  };\n  var json = JSON.stringify(tmp);\n\n  if (!this._validations[json]) {\n    this._validations[json] = tmp;\n    tmp.sqref = [];\n  }\n\n  this._validations[json].sqref.push(ref);\n};\n\nvar MAP_EXCEL_OPERATOR = {\n  // includes only what differs; key is our operator, value is Excel\n  // operator.\n  greaterThanOrEqualTo: \"greaterThanOrEqual\",\n  lessThanOrEqualTo: \"lessThanOrEqual\"\n};\nvar MAP_EXCEL_TYPE = {\n  number: \"decimal\"\n};\nvar defaultFormats = {\n  \"General\": 0,\n  \"0\": 1,\n  \"0.00\": 2,\n  \"#,##0\": 3,\n  \"#,##0.00\": 4,\n  \"0%\": 9,\n  \"0.00%\": 10,\n  \"0.00E+00\": 11,\n  \"# ?/?\": 12,\n  \"# ??/??\": 13,\n  \"mm-dd-yy\": 14,\n  \"d-mmm-yy\": 15,\n  \"d-mmm\": 16,\n  \"mmm-yy\": 17,\n  \"h:mm AM/PM\": 18,\n  \"h:mm:ss AM/PM\": 19,\n  \"h:mm\": 20,\n  \"h:mm:ss\": 21,\n  \"m/d/yy h:mm\": 22,\n  \"#,##0 ;(#,##0)\": 37,\n  \"#,##0 ;[Red](#,##0)\": 38,\n  \"#,##0.00;(#,##0.00)\": 39,\n  \"#,##0.00;[Red](#,##0.00)\": 40,\n  \"mm:ss\": 45,\n  \"[h]:mm:ss\": 46,\n  \"mmss.0\": 47,\n  \"##0.0E+0\": 48,\n  \"@\": 49,\n  \"[$-404]e/m/d\": 27,\n  \"m/d/yy\": 30,\n  \"t0\": 59,\n  \"t0.00\": 60,\n  \"t#,##0\": 61,\n  \"t#,##0.00\": 62,\n  \"t0%\": 67,\n  \"t0.00%\": 68,\n  \"t# ?/?\": 69,\n  \"t# ??/??\": 70\n};\n\nfunction convertColor(value) {\n  var color = value;\n\n  if (color.length < 6) {\n    color = color.replace(/(\\w)/g, function ($0, $1) {\n      return $1 + $1;\n    });\n  }\n\n  color = color.substring(1).toUpperCase();\n\n  if (color.length < 8) {\n    color = \"FF\" + color;\n  }\n\n  return color;\n}\n\nvar Workbook = function Workbook(options) {\n  var this$1 = this;\n  this.options = options || {};\n  this._strings = {\n    indexes: {},\n    count: 0,\n    uniqueCount: 0\n  };\n  this._styles = [];\n  this._borders = [];\n  this._sheets = map(this.options.sheets || [], function (options) {\n    options.defaults = this$1.options;\n    return new Worksheet(options, this$1._strings, this$1._styles, this$1._borders);\n  });\n};\n\nWorkbook.prototype.toZIP = function toZIP() {\n  var this$1 = this;\n  var zip = createZip();\n  var docProps = zip.folder(\"docProps\");\n  docProps.file(\"core.xml\", CORE({\n    creator: this.options.creator || \"Kendo UI\",\n    lastModifiedBy: this.options.creator || \"Kendo UI\",\n    created: this.options.date || new Date().toJSON(),\n    modified: this.options.date || new Date().toJSON()\n  }));\n  var sheetCount = this._sheets.length;\n  docProps.file(\"app.xml\", APP({\n    sheets: this._sheets\n  }));\n  var rels = zip.folder(\"_rels\");\n  rels.file(\".rels\", RELS);\n  var xl = zip.folder(\"xl\");\n  var xlRels = xl.folder(\"_rels\");\n  xlRels.file(\"workbook.xml.rels\", WORKBOOK_RELS({\n    count: sheetCount\n  }));\n  var sheetIds = {};\n  xl.file(\"workbook.xml\", WORKBOOK({\n    sheets: this._sheets,\n    filterNames: map(this._sheets, function (sheet, index) {\n      var options = sheet.options;\n      var sheetName = options.name || options.title || \"Sheet\" + (index + 1);\n      sheetIds[sheetName.toLowerCase()] = index;\n      var filter = options.filter;\n\n      if (filter) {\n        if (filter.ref) {\n          // spreadsheet provides `ref`\n          var a = filter.ref.split(\":\");\n          var from = parseRef(a[0]);\n          var to = parseRef(a[1]);\n          return {\n            localSheetId: index,\n            name: sheetName,\n            from: $ref(from.row, from.col),\n            to: $ref(to.row, to.col)\n          };\n        } else if (typeof filter.from !== \"undefined\" && typeof filter.to !== \"undefined\") {\n          // grid does this\n          return {\n            localSheetId: index,\n            name: sheetName,\n            from: $ref(filterRowIndex(options), filter.from),\n            to: $ref(filterRowIndex(options), filter.to)\n          };\n        }\n      }\n    }),\n    userNames: map(this.options.names || [], function (def) {\n      return {\n        name: def.localName,\n        localSheetId: def.sheet ? sheetIds[def.sheet.toLowerCase()] : null,\n        value: def.value,\n        hidden: def.hidden\n      };\n    })\n  }));\n  var worksheets = xl.folder(\"worksheets\");\n  var sheetRels = worksheets.folder(\"_rels\");\n\n  for (var idx = 0; idx < sheetCount; idx++) {\n    var sheet = this$1._sheets[idx];\n    var sheetName = \"sheet\" + (idx + 1) + \".xml\";\n    var relsXml = sheet.relsToXML();\n\n    if (relsXml) {\n      sheetRels.file(sheetName + \".rels\", relsXml);\n    }\n\n    worksheets.file(sheetName, sheet.toXML(idx));\n  }\n\n  var borders = map(this._borders, parseJSON);\n  var styles = map(this._styles, parseJSON);\n\n  var hasFont = function hasFont(style) {\n    return style.underline || style.bold || style.italic || style.color || style.fontFamily || style.fontSize;\n  };\n\n  var convertFontSize = function convertFontSize(value) {\n    var fontInPx = Number(value);\n    var fontInPt;\n\n    if (fontInPx) {\n      fontInPt = fontInPx * 3 / 4;\n    }\n\n    return fontInPt;\n  };\n\n  var fonts = map(styles, function (style) {\n    if (style.fontSize) {\n      style.fontSize = convertFontSize(style.fontSize);\n    }\n\n    if (style.color) {\n      style.color = convertColor(style.color);\n    }\n\n    if (hasFont(style)) {\n      return style;\n    }\n  });\n  var formats = map(styles, function (style) {\n    if (style.format && defaultFormats[style.format] === undefined) {\n      return style;\n    }\n  });\n  var fills = map(styles, function (style) {\n    if (style.background) {\n      style.background = convertColor(style.background);\n      return style;\n    }\n  });\n  xl.file(\"styles.xml\", STYLES({\n    fonts: fonts,\n    fills: fills,\n    formats: formats,\n    borders: borders,\n    styles: map(styles, function (style) {\n      var result = {};\n\n      if (hasFont(style)) {\n        result.fontId = indexOf(style, fonts) + 1;\n      }\n\n      if (style.background) {\n        result.fillId = indexOf(style, fills) + 2;\n      }\n\n      result.textAlign = style.textAlign;\n      result.indent = style.indent;\n      result.verticalAlign = style.verticalAlign;\n      result.wrap = style.wrap;\n      result.borderId = style.borderId;\n\n      if (style.format) {\n        if (defaultFormats[style.format] !== undefined) {\n          result.numFmtId = defaultFormats[style.format];\n        } else {\n          result.numFmtId = 165 + indexOf(style, formats);\n        }\n      }\n\n      return result;\n    })\n  }));\n  xl.file(\"sharedStrings.xml\", SHARED_STRINGS(this._strings));\n  zip.file(\"[Content_Types].xml\", CONTENT_TYPES({\n    count: sheetCount\n  }));\n  return zip;\n};\n\nWorkbook.prototype.toDataURL = function toDataURL() {\n  var zip = this.toZIP();\n  return zip.generateAsync ? zip.generateAsync(DATA_URL_OPTIONS).then(toDataURI) : toDataURI(zip.generate(DATA_URL_OPTIONS));\n};\n\nfunction borderStyle(width) {\n  var alias = \"thin\";\n\n  if (width === 2) {\n    alias = \"medium\";\n  } else if (width === 3) {\n    alias = \"thick\";\n  }\n\n  return alias;\n}\n\nfunction borderSideTemplate(name, style) {\n  var result = \"\";\n\n  if (style) {\n    result += \"<\" + name + \" style=\\\"\" + borderStyle(style.size) + \"\\\">\";\n\n    if (style.color) {\n      result += \"<color rgb=\\\"\" + convertColor(style.color) + \"\\\"/>\";\n    }\n\n    result += \"</\" + name + \">\";\n  }\n\n  return result;\n}\n\nfunction borderTemplate(border) {\n  return \"<border>\" + borderSideTemplate(\"left\", border.left) + borderSideTemplate(\"right\", border.right) + borderSideTemplate(\"top\", border.top) + borderSideTemplate(\"bottom\", border.bottom) + \"</border>\";\n}\n\nvar EMPTY_CELL = {};\n\nfunction inflate(rows, mergedCells) {\n  var rowData = [];\n  var rowsByIndex = [];\n  indexRows(rows, function (row, index) {\n    var data = {\n      _source: row,\n      index: index,\n      height: row.height,\n      level: row.level,\n      cells: []\n    };\n    rowData.push(data);\n    rowsByIndex[index] = data;\n  });\n  var sorted = sortByIndex(rowData).slice(0);\n  var ctx = {\n    rowData: rowData,\n    rowsByIndex: rowsByIndex,\n    mergedCells: mergedCells\n  };\n\n  for (var i = 0; i < sorted.length; i++) {\n    fillCells(sorted[i], ctx);\n    delete sorted[i]._source;\n  }\n\n  return sortByIndex(rowData);\n}\n\nfunction indexRows(rows, callback) {\n  for (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n\n    if (!row) {\n      continue;\n    }\n\n    var index = row.index;\n\n    if (typeof index !== \"number\") {\n      index = i;\n    }\n\n    callback(row, index);\n  }\n}\n\nfunction sortByIndex(items) {\n  return items.sort(function (a, b) {\n    return a.index - b.index;\n  });\n}\n\nfunction pushUnique(array, el) {\n  if (array.indexOf(el) < 0) {\n    array.push(el);\n  }\n}\n\nfunction getSpan(mergedCells, ref) {\n  for (var i = 0; i < mergedCells.length; ++i) {\n    var range = mergedCells[i];\n    var a = range.split(\":\");\n    var topLeft = a[0];\n\n    if (topLeft === ref) {\n      var bottomRight = a[1];\n      topLeft = parseRef(topLeft);\n      bottomRight = parseRef(bottomRight);\n      return {\n        rowSpan: bottomRight.row - topLeft.row + 1,\n        colSpan: bottomRight.col - topLeft.col + 1\n      };\n    }\n  }\n}\n\nfunction parseRef(ref) {\n  function getcol(str) {\n    var upperStr = str.toUpperCase();\n    var col = 0;\n\n    for (var i = 0; i < upperStr.length; ++i) {\n      col = col * 26 + upperStr.charCodeAt(i) - 64;\n    }\n\n    return col - 1;\n  }\n\n  function getrow(str) {\n    return parseInt(str, 10) - 1;\n  }\n\n  var m = /^([a-z]+)(\\d+)$/i.exec(ref);\n  return {\n    row: getrow(m[2]),\n    col: getcol(m[1])\n  };\n}\n\nfunction fillCells(data, ctx) {\n  var row = data._source;\n  var rowIndex = data.index;\n  var cells = row.cells;\n  var cellData = data.cells;\n\n  if (!cells) {\n    return;\n  }\n\n  for (var i = 0; i < cells.length; i++) {\n    var cell = cells[i] || EMPTY_CELL;\n    var rowSpan = cell.rowSpan || 1;\n    var colSpan = cell.colSpan || 1;\n    var cellIndex = insertCell(cellData, cell);\n    var topLeftRef = ref(rowIndex, cellIndex);\n\n    if (rowSpan === 1 && colSpan === 1) {\n      // could still be merged: the spreadsheet does not send\n      // rowSpan/colSpan, but mergedCells is already populated.\n      // https://github.com/telerik/kendo-ui-core/issues/2401\n      var tmp = getSpan(ctx.mergedCells, topLeftRef);\n\n      if (tmp) {\n        colSpan = tmp.colSpan;\n        rowSpan = tmp.rowSpan;\n      }\n    }\n\n    spanCell(cell, cellData, cellIndex, colSpan);\n\n    if (rowSpan > 1 || colSpan > 1) {\n      pushUnique(ctx.mergedCells, topLeftRef + \":\" + ref(rowIndex + rowSpan - 1, cellIndex + colSpan - 1));\n    }\n\n    if (rowSpan > 1) {\n      for (var ri = rowIndex + 1; ri < rowIndex + rowSpan; ri++) {\n        var nextRow = ctx.rowsByIndex[ri];\n\n        if (!nextRow) {\n          nextRow = ctx.rowsByIndex[ri] = {\n            index: ri,\n            cells: []\n          };\n          ctx.rowData.push(nextRow);\n        }\n\n        spanCell(cell, nextRow.cells, cellIndex - 1, colSpan + 1);\n      }\n    }\n  }\n}\n\nfunction insertCell(data, cell) {\n  var index;\n\n  if (typeof cell.index === \"number\") {\n    index = cell.index;\n    insertCellAt(data, cell, cell.index);\n  } else {\n    index = appendCell(data, cell);\n  }\n\n  return index;\n}\n\nfunction insertCellAt(data, cell, index) {\n  data[index] = cell;\n}\n\nfunction appendCell(data, cell) {\n  var index = data.length;\n\n  for (var i = 0; i < data.length + 1; i++) {\n    if (!data[i]) {\n      data[i] = cell;\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n\nfunction spanCell(cell, row, startIndex, colSpan) {\n  for (var i = 1; i < colSpan; i++) {\n    var tmp = {\n      borderTop: cell.borderTop,\n      borderRight: cell.borderRight,\n      borderBottom: cell.borderBottom,\n      borderLeft: cell.borderLeft\n    };\n    insertCellAt(row, tmp, startIndex + i);\n  }\n}\n\nvar SPREADSHEET_FILTERS = function SPREADSHEET_FILTERS(ref$1) {\n  var ref = ref$1.ref;\n  var columns = ref$1.columns;\n  var generators = ref$1.generators;\n  return \"\\n<autoFilter ref=\\\"\" + ref + \"\\\">\\n  \" + foreach(columns, function (col) {\n    return \"\\n    <filterColumn colId=\\\"\" + col.index + \"\\\">\\n      \" + generators[col.filter](col) + \"\\n    </filterColumn>\\n  \";\n  }) + \"\\n</autoFilter>\";\n};\n\nvar SPREADSHEET_CUSTOM_FILTER = function SPREADSHEET_CUSTOM_FILTER(ref) {\n  var logic = ref.logic;\n  var criteria = ref.criteria;\n  return \"\\n<customFilters \" + (logic === 'and' ? 'and=\"1\"' : '') + \">\\n\" + foreach(criteria, function (f) {\n    var op = spreadsheetFilters.customOperator(f);\n    var val = spreadsheetFilters.customValue(f);\n    return \"<customFilter \" + (op ? \"operator=\\\"\" + op + \"\\\"\" : '') + \" val=\\\"\" + val + \"\\\"/>\";\n  }) + \"\\n</customFilters>\";\n};\n\nvar SPREADSHEET_DYNAMIC_FILTER = function SPREADSHEET_DYNAMIC_FILTER(ref) {\n  var type = ref.type;\n  return \"<dynamicFilter type=\\\"\" + spreadsheetFilters.dynamicFilterType(type) + \"\\\" />\";\n};\n\nvar SPREADSHEET_TOP_FILTER = function SPREADSHEET_TOP_FILTER(ref) {\n  var type = ref.type;\n  var value = ref.value;\n  return \"<top10 percent=\\\"\" + (/percent$/i.test(type) ? 1 : 0) + \"\\\"\\n       top=\\\"\" + (/^top/i.test(type) ? 1 : 0) + \"\\\"\\n       val=\\\"\" + value + \"\\\" />\";\n};\n\nvar SPREADSHEET_VALUE_FILTER = function SPREADSHEET_VALUE_FILTER(ref) {\n  var blanks = ref.blanks;\n  var values = ref.values;\n  return \"<filters \" + (blanks ? 'blank=\"1\"' : '') + \">\\n    \" + foreach(values, function (value) {\n    return \"\\n      <filter val=\\\"\" + value + \"\\\" />\";\n  }) + \"\\n  </filters>\";\n};\n\nfunction spreadsheetFilters(filter) {\n  return SPREADSHEET_FILTERS({\n    ref: filter.ref,\n    columns: filter.columns,\n    generators: {\n      custom: SPREADSHEET_CUSTOM_FILTER,\n      dynamic: SPREADSHEET_DYNAMIC_FILTER,\n      top: SPREADSHEET_TOP_FILTER,\n      value: SPREADSHEET_VALUE_FILTER\n    }\n  });\n}\n\nspreadsheetFilters.customOperator = function (f) {\n  return {\n    eq: \"equal\",\n    gt: \"greaterThan\",\n    gte: \"greaterThanOrEqual\",\n    lt: \"lessThan\",\n    lte: \"lessThanOrEqual\",\n    ne: \"notEqual\",\n    // These are not in the spec, but seems to be how Excel does\n    // it (see customValue below).  For the non-negated versions,\n    // the operator attribute is missing completely.\n    doesnotstartwith: \"notEqual\",\n    doesnotendwith: \"notEqual\",\n    doesnotcontain: \"notEqual\",\n    doesnotmatch: \"notEqual\"\n  }[f.operator.toLowerCase()];\n};\n\nspreadsheetFilters.customValue = function (f) {\n  function esc(str) {\n    return str.replace(/([*?])/g, \"~$1\");\n  }\n\n  switch (f.operator.toLowerCase()) {\n    case \"startswith\":\n    case \"doesnotstartwith\":\n      return esc(f.value) + \"*\";\n\n    case \"endswith\":\n    case \"doesnotendwith\":\n      return \"*\" + esc(f.value);\n\n    case \"contains\":\n    case \"doesnotcontain\":\n      return \"*\" + esc(f.value) + \"*\";\n\n    default:\n      return f.value;\n  }\n};\n\nspreadsheetFilters.dynamicFilterType = function (type) {\n  return {\n    quarter1: \"Q1\",\n    quarter2: \"Q2\",\n    quarter3: \"Q3\",\n    quarter4: \"Q4\",\n    january: \"M1\",\n    february: \"M2\",\n    march: \"M3\",\n    april: \"M4\",\n    may: \"M5\",\n    june: \"M6\",\n    july: \"M7\",\n    august: \"M8\",\n    september: \"M9\",\n    october: \"M10\",\n    november: \"M11\",\n    december: \"M12\"\n  }[type.toLowerCase()] || type;\n};\n\nexport { Workbook, Worksheet };","map":null,"metadata":{},"sourceType":"module"}