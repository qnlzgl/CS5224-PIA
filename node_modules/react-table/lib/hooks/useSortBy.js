"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSortBy = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _actions = require("../actions");

var _useTableState = require("./useTableState");

var _utils = require("../utils");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

_useTableState.defaultState.sortBy = [];

(0, _actions.addActions)({
  sortByChange: "__sortByChange__"
});

var useSortBy = exports.useSortBy = function useSortBy(api) {
  var debug = api.debug,
      rows = api.rows,
      columns = api.columns,
      _api$orderByFn = api.orderByFn,
      orderByFn = _api$orderByFn === undefined ? _utils.defaultOrderByFn : _api$orderByFn,
      _api$sortByFn = api.sortByFn,
      sortByFn = _api$sortByFn === undefined ? _utils.defaultSortByFn : _api$sortByFn,
      manualSorting = api.manualSorting,
      disableSorting = api.disableSorting,
      defaultSortDesc = api.defaultSortDesc,
      hooks = api.hooks,
      _api$state = _slicedToArray(api.state, 2),
      sortBy = _api$state[0].sortBy,
      setState = _api$state[1];

  columns.forEach(function (column) {
    var accessor = column.accessor,
        canSortBy = column.canSortBy;

    column.canSortBy = accessor ? (0, _utils.getFirstDefined)(canSortBy, disableSorting === true ? false : undefined, true) : false;
  });

  // Updates sorting based on a columnID, desc flag and multi flag
  var toggleSortByID = function toggleSortByID(columnID, desc, multi) {
    return setState(function (old) {
      var sortBy = old.sortBy;

      // Find the column for this columnID

      var column = columns.find(function (d) {
        return d.id === columnID;
      });
      var resolvedDefaultSortDesc = (0, _utils.getFirstDefined)(column.defaultSortDesc, defaultSortDesc);

      // Find any existing sortBy for this column
      var existingSortBy = sortBy.find(function (d) {
        return d.id === columnID;
      });
      var hasDescDefined = typeof desc !== "undefined" && desc !== null;

      var newSortBy = [];

      // What should we do with this filter?
      var action = void 0;

      if (!multi) {
        if (sortBy.length <= 1 && existingSortBy) {
          if (existingSortBy.desc) {
            action = "remove";
          } else {
            action = "toggle";
          }
        } else {
          action = "replace";
        }
      } else {
        if (!existingSortBy) {
          action = "add";
        } else {
          if (hasDescDefined) {
            action = "set";
          } else {
            action = "toggle";
          }
        }
      }

      if (action === "replace") {
        newSortBy = [{
          id: columnID,
          desc: hasDescDefined ? desc : resolvedDefaultSortDesc
        }];
      } else if (action === "add") {
        newSortBy = [].concat(_toConsumableArray(sortBy), [{
          id: columnID,
          desc: hasDescDefined ? desc : resolvedDefaultSortDesc
        }]);
      } else if (action === "set") {
        newSortBy = sortBy.map(function (d) {
          if (d.id === columnID) {
            return _extends({}, d, {
              desc: desc
            });
          }
          return d;
        });
      } else if (action === "toggle") {
        newSortBy = sortBy.map(function (d) {
          if (d.id === columnID) {
            return _extends({}, d, {
              desc: !existingSortBy.desc
            });
          }
          return d;
        });
      } else if (action === "remove") {
        newSortBy = [];
      }

      return _extends({}, old, {
        sortBy: newSortBy
      });
    }, _actions.actions.sortByChange);
  };

  hooks.columns.push(function (columns) {
    columns.forEach(function (column) {
      if (column.canSortBy) {
        column.toggleSortBy = function (desc, multi) {
          return toggleSortByID(column.id, desc, multi);
        };
      }
    });
    return columns;
  });

  hooks.getSortByToggleProps = [];

  var addSortByToggleProps = function addSortByToggleProps(columns, api) {
    columns.forEach(function (column) {
      var canSortBy = column.canSortBy;

      column.getSortByToggleProps = function (props) {
        return (0, _utils.mergeProps)({
          onClick: canSortBy ? function (e) {
            e.persist();
            column.toggleSortBy(undefined, !api.disableMultiSort && e.shiftKey);
          } : undefined,
          style: {
            cursor: canSortBy ? "pointer" : undefined
          },
          title: "Toggle SortBy"
        }, (0, _utils.applyPropHooks)(api.hooks.getSortByToggleProps, column, api), props);
      };
    });
    return columns;
  };

  hooks.columns.push(addSortByToggleProps);
  hooks.headers.push(addSortByToggleProps);

  // Mutate columns to reflect sorting state
  columns.forEach(function (column) {
    var id = column.id;

    column.sorted = sortBy.find(function (d) {
      return d.id === id;
    });
    column.sortedIndex = sortBy.findIndex(function (d) {
      return d.id === id;
    });
    column.sortedDesc = column.sorted ? column.sorted.desc : undefined;
  });

  var sortedRows = (0, _react.useMemo)(function () {
    if (manualSorting || !sortBy.length) {
      return rows;
    }
    if (debug) console.info("getSortedRows");

    var sortMethodsByColumnID = {};

    columns.filter(function (col) {
      return col.sortMethod;
    }).forEach(function (col) {
      sortMethodsByColumnID[col.id] = col.sortMethod;
    });

    var sortData = function sortData(rows) {
      // Use the orderByFn to compose multiple sortBy's together.
      // This will also perform a stable sorting using the row index
      // if needed.
      var sortedData = orderByFn(rows, sortBy.map(function (sort) {
        // Support custom sorting methods for each column
        var columnSortBy = sortMethodsByColumnID[sort.id];

        // Return the correct sortFn
        return function (a, b) {
          return (columnSortBy ? columnSortBy : sortByFn)(a.values[sort.id], b.values[sort.id], sort.desc);
        };
      }),
      // Map the directions
      sortBy.map(function (d) {
        return !d.desc;
      }));

      // TODO: this should be optimized. Not good to loop again
      sortedData.forEach(function (row) {
        if (!row.subRows) {
          return;
        }
        row.subRows = sortData(row.subRows);
      });

      return sortedData;
    };

    return sortData(rows);
  }, [rows, columns, sortBy, manualSorting]);

  return _extends({}, api, {
    rows: sortedRows
  });
};
//# sourceMappingURL=data:application/json;base64,