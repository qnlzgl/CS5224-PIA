'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTable = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
//


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../utils');

var _useTableState = require('./useTableState');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var renderErr = 'You must specify a render "type". This could be "Header", "Filter", or any other custom renderers you have set on your column.';

var propTypes = {
  // General
  data: _propTypes2.default.any,
  columns: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    aggregate: _propTypes2.default.func,
    filterFn: _propTypes2.default.func,
    filterAll: _propTypes2.default.bool,
    sortByFn: _propTypes2.default.func,
    resolvedDefaultSortDesc: _propTypes2.default.bool,
    canSortBy: _propTypes2.default.bool,
    canGroupBy: _propTypes2.default.bool,
    Cell: _propTypes2.default.any,
    Header: _propTypes2.default.any,
    Filter: _propTypes2.default.any
  })),

  filterFn: _propTypes2.default.func,
  sortByFn: _propTypes2.default.func,
  orderByFn: _propTypes2.default.func,
  groupByFn: _propTypes2.default.func,

  manualGrouping: _propTypes2.default.bool,
  manualFilters: _propTypes2.default.bool,
  manualSorting: _propTypes2.default.bool,

  defaultSortDesc: _propTypes2.default.bool,
  disableMultiSort: _propTypes2.default.bool,
  subRowsKey: _propTypes2.default.string,
  expandedKey: _propTypes2.default.string,
  userAggregations: _propTypes2.default.object,

  debug: _propTypes2.default.bool
};

var useTable = exports.useTable = function useTable(props) {
  for (var _len = arguments.length, plugins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    plugins[_key - 1] = arguments[_key];
  }

  // Validate props
  _propTypes2.default.checkPropTypes(propTypes, props, 'property', 'useTable');

  // Destructure props
  var _props$data = props.data,
      data = _props$data === undefined ? [] : _props$data,
      userState = props.state,
      debug = props.debug;

  // Always provide a default state

  var defaultState = (0, _useTableState.useTableState)();

  // But use the users state if provided
  var state = userState || defaultState;

  // These are hooks that plugins can use right before render
  var hooks = {
    beforeRender: [],
    columns: [],
    headers: [],
    headerGroups: [],
    rows: [],
    row: [],
    renderableRows: [],
    getTableProps: [],
    getRowProps: [],
    getHeaderRowProps: [],
    getHeaderProps: [],
    getCellProps: []

    // The initial api
  };var api = _extends({}, props, {
    data: data,
    state: state,
    hooks: hooks
  });

  if (debug) console.time('hooks');
  // Loop through plugins to build the api out
  api = plugins.filter(Boolean).reduce(function (prev, next) {
    return next(prev);
  }, api);
  if (debug) console.timeEnd('hooks');

  // Run the beforeRender hook
  if (debug) console.time('hooks.beforeRender');
  (0, _utils.applyHooks)(api.hooks.beforeRender, undefined, api);
  if (debug) console.timeEnd('hooks.beforeRender');

  if (debug) console.time('hooks.columns');
  api.columns = (0, _utils.applyHooks)(api.hooks.columns, api.columns, api);
  if (debug) console.timeEnd('hooks.columns');

  if (debug) console.time('hooks.headers');
  api.headers = (0, _utils.applyHooks)(api.hooks.headers, api.headers, api);
  if (debug) console.timeEnd('hooks.headers');
  [].concat(_toConsumableArray(api.columns), _toConsumableArray(api.headers)).forEach(function (column) {
    // Give columns/headers rendering power
    column.render = function (type) {
      var userProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!type) {
        throw new Error(renderErr);
      }
      return (0, _utils.flexRender)(column[type], _extends({}, api, column, userProps));
    };

    // Give columns/headers getHeaderProps
    column.getHeaderProps = function (props) {
      return (0, _utils.mergeProps)({
        key: ['header', column.id].join('_')
      }, (0, _utils.applyPropHooks)(api.hooks.getHeaderProps, column, api), props);
    };
  });

  if (debug) console.time('hooks.headerGroups');
  api.headerGroups = (0, _utils.applyHooks)(api.hooks.headerGroups, api.headerGroups, api).filter(function (headerGroup, i) {
    // Filter out any headers and headerGroups that don't have visible columns
    headerGroup.headers = headerGroup.headers.filter(function (header) {
      var recurse = function recurse(columns) {
        return columns.filter(function (column) {
          if (column.columns) {
            return recurse(column.columns);
          }
          return column.visible;
        }).length;
      };
      if (header.columns) {
        return recurse(header.columns);
      }
      return header.visible;
    });

    // Give headerGroups getRowProps
    if (headerGroup.headers.length) {
      headerGroup.getRowProps = function () {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return (0, _utils.mergeProps)({
          key: ['header' + i].join('_')
        }, (0, _utils.applyPropHooks)(api.hooks.getHeaderRowProps, headerGroup, api), props);
      };
      return true;
    }

    return false;
  });
  if (debug) console.timeEnd('hooks.headerGroups');

  // Run the rows (this could be a dangerous hook with a ton of data)
  if (debug) console.time('hooks.rows');
  api.rows = (0, _utils.applyHooks)(api.hooks.rows, api.rows, api);
  if (debug) console.timeEnd('hooks.rows');

  // This function is absolutely necessary and MUST be called on
  // any rows the user wishes to be displayed.
  api.prepareRow = function (row) {
    var index = row.index;

    row.getRowProps = function (props) {
      return (0, _utils.mergeProps)({ key: ['row', index].join('_') }, (0, _utils.applyHooks)(api.hooks.getRowProps, row, api), props);
    };

    row.cells = row.cells.filter(function (cell) {
      return cell.column.visible;
    });

    row.cells.forEach(function (cell) {
      if (!cell) {
        return;
      }

      var column = cell.column;


      cell.getCellProps = function (props) {
        var columnPathStr = [index, column.id].join('_');
        return (0, _utils.mergeProps)({
          key: ['cell', columnPathStr].join('_')
        }, (0, _utils.applyPropHooks)(api.hooks.getCellProps, cell, api), props);
      };

      cell.render = function (type) {
        var userProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!type) {
          throw new Error('You must specify a render "type". This could be "Cell", "Header", "Filter", "Aggregated" or any other custom renderers you have set on your column.');
        }
        return (0, _utils.flexRender)(column[type], _extends({}, api, cell, userProps));
      };
    });
  };

  api.getTableProps = function (userProps) {
    return (0, _utils.mergeProps)((0, _utils.applyPropHooks)(api.hooks.getTableProps, api), userProps);
  };

  api.getRowProps = function (userProps) {
    return (0, _utils.mergeProps)((0, _utils.applyPropHooks)(api.hooks.getRowProps, api), userProps);
  };

  return api;
};
//# sourceMappingURL=data:application/json;base64,