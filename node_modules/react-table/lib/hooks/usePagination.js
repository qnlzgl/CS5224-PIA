"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePagination = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _actions = require("../actions");

var _useTableState = require("./useTableState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

_useTableState.defaultState.pageSize = 10;
_useTableState.defaultState.pageIndex = 0;

(0, _actions.addActions)({
  pageChange: "__pageChange__"
});

var propTypes = {
  defaultPageSize: _propTypes2.default.number,
  defaultPageIndex: _propTypes2.default.number,
  pageSize: _propTypes2.default.number,
  pages: _propTypes2.default.number,
  pageIndex: _propTypes2.default.number,
  onStateChange: _propTypes2.default.func,
  stateReducer: _propTypes2.default.func,
  debug: _propTypes2.default.bool
};

var usePagination = exports.usePagination = function usePagination(props) {
  // Validate props
  _propTypes2.default.checkPropTypes(propTypes, props, "property", "usePagination");

  var parentDebug = props.debug,
      rows = props.rows,
      manualPagination = props.manualPagination,
      _props$debug = props.debug,
      debug = _props$debug === undefined ? parentDebug : _props$debug,
      _props$state = _slicedToArray(props.state, 2),
      _props$state$ = _props$state[0],
      pageSize = _props$state$.pageSize,
      pageIndex = _props$state$.pageIndex,
      userPageCount = _props$state$.pageCount,
      filters = _props$state$.filters,
      groupBy = _props$state$.groupBy,
      sortBy = _props$state$.sortBy,
      setState = _props$state[1];

  (0, _react.useLayoutEffect)(function () {
    setState(function (old) {
      return _extends({}, old, {
        pageIndex: 0
      });
    }, _actions.actions.pageChange);
  }, [filters, groupBy, sortBy]);

  var _useMemo = (0, _react.useMemo)(function () {
    if (manualPagination) {
      return {
        pages: [rows],
        pageCount: userPageCount
      };
    }
    if (debug) console.info("getPages");

    // Create a new pages with the first page ready to go.
    var pages = rows.length ? [] : [[]];

    // Start the pageIndex and currentPage cursors
    var cursor = 0;
    while (cursor < rows.length) {
      var end = cursor + pageSize;
      pages.push(rows.slice(cursor, end));
      cursor = end;
    }

    var pageCount = pages.length;

    return {
      pages: pages,
      pageCount: pageCount,
      pageOptions: pageOptions
    };
  }, [rows, pageSize, userPageCount]),
      pages = _useMemo.pages,
      pageCount = _useMemo.pageCount;

  var pageOptions = [].concat(_toConsumableArray(new Array(pageCount))).map(function (d, i) {
    return i;
  });
  var page = manualPagination ? rows : pages[pageIndex] || [];
  var canPreviousPage = pageIndex > 0;
  var canNextPage = pageIndex < pageCount - 1;

  var gotoPage = function gotoPage(pageIndex) {
    if (debug) console.info("gotoPage");
    return setState(function (old) {
      if (pageIndex < 0 || pageIndex > pageCount - 1) {
        return old;
      }
      return _extends({}, old, {
        pageIndex: pageIndex
      });
    }, _actions.actions.pageChange);
  };

  var previousPage = function previousPage() {
    return gotoPage(pageIndex - 1);
  };

  var nextPage = function nextPage() {
    return gotoPage(pageIndex + 1);
  };

  var setPageSize = function setPageSize(pageSize) {
    setState(function (old) {
      var topRowIndex = old.pageSize * old.pageIndex;
      var pageIndex = Math.floor(topRowIndex / pageSize);
      return _extends({}, old, {
        pageIndex: pageIndex,
        pageSize: pageSize
      });
    }, _actions.actions.setPageSize);
  };

  return _extends({}, props, {
    pages: pages,
    pageOptions: pageOptions,
    page: page,
    canPreviousPage: canPreviousPage,
    canNextPage: canNextPage,
    gotoPage: gotoPage,
    previousPage: previousPage,
    nextPage: nextPage,
    setPageSize: setPageSize
  });
};
//# sourceMappingURL=data:application/json;base64,