"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFilters = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _utils = require("../utils");

var _actions = require("../actions");

var _useTableState = require("./useTableState");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

_useTableState.defaultState.filters = {};
(0, _actions.addActions)({
  setFilter: "__setFilter__",
  setAllFilters: "__setAllFilters__"
});

var useFilters = function useFilters(props) {
  var debug = props.debug,
      rows = props.rows,
      columns = props.columns,
      _props$filterFn = props.filterFn,
      filterFn = _props$filterFn === undefined ? _utils.defaultFilterFn : _props$filterFn,
      manualFilters = props.manualFilters,
      disableFilters = props.disableFilters,
      hooks = props.hooks,
      _props$state = _slicedToArray(props.state, 2),
      filters = _props$state[0].filters,
      setState = _props$state[1];

  columns.forEach(function (column) {
    var id = column.id,
        accessor = column.accessor,
        canFilter = column.canFilter;

    column.canFilter = accessor ? (0, _utils.getFirstDefined)(canFilter, disableFilters === true ? false : undefined, true) : false;
    // Was going to add this to the filter hook
    column.filterValue = filters[id];
  });

  var setFilter = function setFilter(id, val) {
    return setState(function (old) {
      if (typeof val === "undefined") {
        var prev = filters[id],
            rest = _objectWithoutProperties(filters, [id]);

        return _extends({}, old, {
          filters: _extends({}, rest)
        });
      }

      return _extends({}, old, {
        filters: _extends({}, filters, _defineProperty({}, id, val))
      });
    }, _actions.actions.setFilter);
  };

  var setAllFilters = function setAllFilters(filters) {
    return setState(function (old) {
      return _extends({}, old, {
        filters: filters
      });
    }, _actions.actions.setAllFilters);
  };

  hooks.columns.push(function (columns) {
    columns.forEach(function (column) {
      if (column.canFilter) {
        column.setFilter = function (val) {
          return setFilter(column.id, val);
        };
      }
    });
    return columns;
  });

  var filteredRows = (0, _react.useMemo)(function () {
    if (manualFilters || !Object.keys(filters).length) {
      return rows;
    }

    if (debug) console.info("getFilteredRows");

    // Filters top level and nested rows
    var filterRows = function filterRows(rows) {
      var filteredRows = rows;

      filteredRows = Object.entries(filters).reduce(function (filteredSoFar, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            columnID = _ref2[0],
            filterValue = _ref2[1];

        // Find the filters column
        var column = columns.find(function (d) {
          return d.id === columnID;
        });

        // Don't filter hidden columns or columns that have had their filters disabled
        if (!column || column.filterable === false) {
          return filteredSoFar;
        }

        var filterMethod = column.filterMethod || filterFn;

        // If 'filterAll' is set to true, pass the entire dataset to the filter method
        if (column.filterAll) {
          return filterMethod(filteredSoFar, columnID, filterValue, column);
        }
        return filteredSoFar.filter(function (row) {
          return filterMethod(row, columnID, filterValue, column);
        });
      }, rows);

      // Apply the filter to any subRows
      filteredRows = filteredRows.map(function (row) {
        if (!row.subRows) {
          return row;
        }
        return _extends({}, row, {
          subRows: filterRows(row.subRows)
        });
      });

      // then filter any rows without subcolumns because it would be strange to show
      filteredRows = filteredRows.filter(function (row) {
        if (!row.subRows) {
          return true;
        }
        return row.subRows.length > 0;
      });

      return filteredRows;
    };

    return filterRows(rows);
  }, [rows, filters, manualFilters]);

  return _extends({}, props, {
    setFilter: setFilter,
    setAllFilters: setAllFilters,
    rows: filteredRows
  });
};
exports.useFilters = useFilters;
//# sourceMappingURL=data:application/json;base64,