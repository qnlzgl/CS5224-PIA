"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFlexLayout = exports.actions = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  defaultFlex: _propTypes2.default.number
};

var actions = exports.actions = {};

var useFlexLayout = exports.useFlexLayout = function useFlexLayout(props) {
  // Validate props
  _propTypes2.default.checkPropTypes(propTypes, props, "property", "useFlexLayout");

  var _props$defaultFlex = props.defaultFlex,
      defaultFlex = _props$defaultFlex === undefined ? 1 : _props$defaultFlex,
      _props$hooks = props.hooks,
      columnsHooks = _props$hooks.columns,
      getRowProps = _props$hooks.getRowProps,
      getHeaderRowProps = _props$hooks.getHeaderRowProps,
      getHeaderProps = _props$hooks.getHeaderProps,
      getCellProps = _props$hooks.getCellProps;


  columnsHooks.push(function (columns, api) {
    var visibleColumns = columns.filter(function (column) {
      column.visible = typeof column.show === "function" ? column.show(api) : !!column.show;
      return column.visible;
    });

    var columnMeasurements = {};

    var sumWidth = 0;
    visibleColumns.forEach(function (column) {
      var _getSizesForColumn = getSizesForColumn(column, defaultFlex, undefined, undefined, api),
          width = _getSizesForColumn.width,
          minWidth = _getSizesForColumn.minWidth;

      if (width) {
        sumWidth += width;
      } else if (minWidth) {
        sumWidth += minWidth;
      } else {
        sumWidth += defaultFlex;
      }
    });

    var rowStyles = {
      style: {
        display: "flex",
        minWidth: sumWidth + "px"
      }
    };

    api.rowStyles = rowStyles;

    getRowProps.push(function () {
      return rowStyles;
    });
    getHeaderRowProps.push(function () {
      return rowStyles;
    });

    getHeaderProps.push(function (column) {
      return {
        style: _extends({
          boxSizing: "border-box"
        }, getStylesForColumn(column, columnMeasurements, defaultFlex, api))
        // [refKey]: el => {
        //   renderedCellInfoRef.current[key] = {
        //     column,
        //     el
        //   };
        // },
      };
    });

    getCellProps.push(function (cell) {
      return {
        style: _extends({
          display: "block",
          boxSizing: "border-box"
        }, getStylesForColumn(cell.column, columnMeasurements, defaultFlex, undefined, api))
        // [refKey]: el => {
        //   renderedCellInfoRef.current[columnPathStr] = {
        //     column,
        //     el
        //   };
        // }
      };
    });

    return columns;
  });

  return props;
};

// Utils

function getStylesForColumn(column, columnMeasurements, defaultFlex, api) {
  var _getSizesForColumn2 = getSizesForColumn(column, columnMeasurements, defaultFlex, api),
      flex = _getSizesForColumn2.flex,
      width = _getSizesForColumn2.width,
      maxWidth = _getSizesForColumn2.maxWidth;

  return {
    flex: flex + " 0 auto",
    width: width + "px",
    maxWidth: maxWidth + "px"
  };
}

function getSizesForColumn(_ref, columnMeasurements, defaultFlex, api) {
  var columns = _ref.columns,
      id = _ref.id,
      width = _ref.width,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth;

  if (columns) {
    columns = columns.map(function (column) {
      return getSizesForColumn(column, columnMeasurements, defaultFlex, api);
    }).filter(Boolean);

    if (!columns.length) {
      return false;
    }

    var flex = (0, _utils.sum)(columns.map(function (col) {
      return col.flex;
    }));
    var _width = (0, _utils.sum)(columns.map(function (col) {
      return col.width;
    }));
    var _maxWidth = (0, _utils.sum)(columns.map(function (col) {
      return col.maxWidth;
    }));

    return {
      flex: flex,
      width: _width,
      maxWidth: _maxWidth
    };
  }

  return {
    flex: width ? 0 : defaultFlex,
    width: width === "auto" ? columnMeasurements[id] || defaultFlex : (0, _utils.getFirstDefined)(width, minWidth, defaultFlex),
    maxWidth: maxWidth
  };
}

// const resetRefs = () => {
//   if (debug) console.info("resetRefs");
//   renderedCellInfoRef.current = {};
// };

// const calculateAutoWidths = () => {
//   RAF(() => {
//     const newColumnMeasurements = {};
//     Object.values(renderedCellInfoRef.current).forEach(({ column, el }) => {
//       if (!el) {
//         return;
//       }

//       let measurement = 0;

//       const measureChildren = children => {
//         if (children) {
//           [].slice.call(children).forEach(child => {
//             measurement = Math.max(
//               measurement,
//               Math.ceil(child.offsetWidth) || 0
//             );
//             measureChildren(child.children);
//           });
//         }
//         return measurement;
//       };

//       const parentDims = getElementDimensions(el);
//       measureChildren(el.children);

//       newColumnMeasurements[column.id] = Math.max(
//         newColumnMeasurements[column.id] || 0,
//         measurement + parentDims.paddingLeft + parentDims.paddingRight
//       );
//     });

//     const oldKeys = Object.keys(columnMeasurements);
//     const newKeys = Object.keys(newColumnMeasurements);

//     const needsUpdate =
//       oldKeys.length !== newKeys.length ||
//       oldKeys.some(key => {
//         return columnMeasurements[key] !== newColumnMeasurements[key];
//       });

//     if (needsUpdate) {
//       setState(old => {
//         return {
//           ...old,
//           columnMeasurements: newColumnMeasurements
//         };
//       }, actions.updateAutoWidth);
//     }
//   });
// };
//# sourceMappingURL=data:application/json;base64,