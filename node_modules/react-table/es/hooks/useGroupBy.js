var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { useMemo } from "react";

import * as aggregations from "../aggregations";
import { addActions, actions } from "../actions";
import { defaultState } from "./useTableState";
import { mergeProps, applyPropHooks, defaultGroupByFn, getFirstDefined } from "../utils";

defaultState.groupBy = [];

addActions({
  toggleGroupBy: "__toggleGroupBy__"
});

export var useGroupBy = function useGroupBy(api) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var debug = api.debug,
      rows = api.rows,
      columns = api.columns,
      _api$groupByFn = api.groupByFn,
      groupByFn = _api$groupByFn === undefined ? defaultGroupByFn : _api$groupByFn,
      manualGroupBy = api.manualGroupBy,
      disableGrouping = api.disableGrouping,
      _api$aggregations = api.aggregations,
      userAggregations = _api$aggregations === undefined ? {} : _api$aggregations,
      hooks = api.hooks,
      _api$state = _slicedToArray(api.state, 2),
      groupBy = _api$state[0].groupBy,
      setState = _api$state[1];

  columns.forEach(function (column) {
    var id = column.id,
        accessor = column.accessor,
        canGroupBy = column.canGroupBy;

    column.grouped = groupBy.includes(id);

    column.canGroupBy = accessor ? getFirstDefined(canGroupBy, disableGrouping === true ? false : undefined, true) : false;

    column.Aggregated = column.Aggregated || column.Cell;
  });

  var toggleGroupBy = function toggleGroupBy(id, toggle) {
    return setState(function (old) {
      var resolvedToggle = typeof set !== "undefined" ? toggle : !groupBy.includes(id);
      if (resolvedToggle) {
        return _extends({}, old, {
          groupBy: [].concat(_toConsumableArray(groupBy), [id])
        });
      }
      return _extends({}, old, {
        groupBy: groupBy.filter(function (d) {
          return d !== id;
        })
      });
    }, actions.toggleGroupBy);
  };

  hooks.columns.push(function (columns) {
    columns.forEach(function (column) {
      if (column.canGroupBy) {
        column.toggleGroupBy = function () {
          return toggleGroupBy(column.id);
        };
      }
    });
    return columns;
  });

  hooks.getGroupByToggleProps = [];

  var addGroupByToggleProps = function addGroupByToggleProps(columns, api) {
    columns.forEach(function (column) {
      var canGroupBy = column.canGroupBy;

      column.getGroupByToggleProps = function (props) {
        return mergeProps({
          onClick: canGroupBy ? function (e) {
            e.persist();
            column.toggleGroupBy();
          } : undefined,
          style: {
            cursor: canGroupBy ? "pointer" : undefined
          },
          title: "Toggle GroupBy"
        }, applyPropHooks(api.hooks.getGroupByToggleProps, column, api), props);
      };
    });
    return columns;
  };

  hooks.columns.push(addGroupByToggleProps);
  hooks.headers.push(addGroupByToggleProps);

  var groupedRows = useMemo(function () {
    if (manualGroupBy || !groupBy.length) {
      return rows;
    }
    if (debug) console.info("getGroupedRows");
    // Find the columns that can or are aggregating

    // Uses each column to aggregate rows into a single value
    var aggregateRowsToValues = function aggregateRowsToValues(rows) {
      var values = {};
      columns.forEach(function (column) {
        var columnValues = rows.map(function (d) {
          return d.values[column.id];
        });
        var aggregate = userAggregations[column.aggregate] || aggregations[column.aggregate] || column.aggregate;
        if (typeof aggregate === "function") {
          values[column.id] = aggregate(columnValues, rows);
        } else if (aggregate) {
          throw new Error("Invalid aggregate \"" + aggregate + "\" passed to column with ID: \"" + column.id + "\"");
        } else {
          values[column.id] = columnValues[0];
        }
      });
      return values;
    };

    // Recursively group the data
    var groupRecursively = function groupRecursively(rows, groupBy) {
      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      // This is the last level, just return the rows
      if (depth >= groupBy.length) {
        return rows;
      }

      // Group the rows together for this level
      var groupedRows = Object.entries(groupByFn(rows, groupBy[depth])).map(function (_ref, index) {
        var _ref2 = _slicedToArray(_ref, 2),
            groupByVal = _ref2[0],
            subRows = _ref2[1];

        // Recurse to sub rows before aggregation
        subRows = groupRecursively(subRows, groupBy, depth + 1);

        var values = aggregateRowsToValues(subRows);

        var row = {
          groupByID: groupBy[depth],
          groupByVal: groupByVal,
          values: values,
          subRows: subRows,
          depth: depth,
          index: index
        };
        return row;
      });

      return groupedRows;
    };

    // Assign the new data
    return groupRecursively(rows, groupBy);
  }, [rows, groupBy, columns, manualGroupBy]);

  return _extends({}, api, {
    rows: groupedRows
  });
};
//# sourceMappingURL=data:application/json;base64,