var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { useMemo } from "react";

import { getFirstDefined, getBy } from "../utils";

export var useColumns = function useColumns(props) {
  var debug = props.debug,
      userColumns = props.columns,
      _props$state = _slicedToArray(props.state, 1),
      groupBy = _props$state[0].groupBy;

  var _useMemo = useMemo(function () {
    if (debug) console.info("getColumns");

    // Decorate All the columns
    var columnTree = decorateColumnTree(userColumns);

    // Get the flat list of all columns
    var columns = flattenBy(columnTree, "columns");

    columns = [].concat(_toConsumableArray(groupBy.map(function (g) {
      return columns.find(function (col) {
        return col.id === g;
      });
    })), _toConsumableArray(columns.filter(function (col) {
      return !groupBy.includes(col.id);
    })));

    // Get headerGroups
    var headerGroups = makeHeaderGroups(columns, findMaxDepth(columnTree));
    var headers = flattenBy(headerGroups, "headers");

    return {
      columns: columns,
      headerGroups: headerGroups,
      headers: headers
    };
  }, [groupBy, userColumns]),
      columns = _useMemo.columns,
      headerGroups = _useMemo.headerGroups,
      headers = _useMemo.headers;

  return _extends({}, props, {
    columns: columns,
    headerGroups: headerGroups,
    headers: headers
  });

  // Find the depth of the columns
  function findMaxDepth(columns) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    return columns.reduce(function (prev, curr) {
      if (curr.columns) {
        return Math.max(prev, findMaxDepth(curr.columns, depth + 1));
      }
      return depth;
    }, 0);
  }

  function decorateColumn(column, parent) {
    // First check for string accessor
    var _column = column,
        id = _column.id,
        accessor = _column.accessor,
        Header = _column.Header;


    if (typeof accessor === "string") {
      id = id || accessor;
      var accessorString = accessor;
      accessor = function accessor(row) {
        return getBy(row, accessorString);
      };
    }

    if (!id && typeof Header === "string") {
      id = Header;
    }

    if (!id) {
      // Accessor, but no column id? This is bad.
      console.error(column);
      throw new Error("A column id is required!");
    }

    column = _extends({
      Header: "",
      Cell: function Cell(cell) {
        return cell.value;
      },
      show: true
    }, column, {
      id: id,
      accessor: accessor,
      parent: parent
    });

    return column;
  }

  // Build the visible columns, headers and flat column list
  function decorateColumnTree(columns, parent) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    return columns.map(function (column) {
      column = decorateColumn(column, parent);
      if (column.columns) {
        column.columns = decorateColumnTree(column.columns, column, depth + 1);
      }
      return column;
    });
  }

  function flattenBy(columns, childKey) {
    var flatColumns = [];

    var recurse = function recurse(columns) {
      columns.forEach(function (d) {
        if (!d[childKey]) {
          flatColumns.push(d);
        } else {
          recurse(d[childKey]);
        }
      });
    };

    recurse(columns);

    return flatColumns;
  }

  // Build the header groups from the bottom up
  function makeHeaderGroups(columns, maxDepth) {
    var headerGroups = [];

    var removeChildColumns = function removeChildColumns(column) {
      delete column.columns;
      if (column.parent) {
        removeChildColumns(column.parent);
      }
    };
    columns.forEach(removeChildColumns);

    var buildGroup = function buildGroup(columns) {
      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var headerGroup = {
        headers: []
      };

      var parentColumns = [];

      var hasParents = columns.some(function (col) {
        return col.parent;
      });

      columns.forEach(function (column) {
        var isFirst = !parentColumns.length;
        var latestParentColumn = [].concat(parentColumns).reverse()[0];

        // If the column has a parent, add it if necessary
        if (column.parent) {
          if (isFirst || latestParentColumn.originalID !== column.parent.id) {
            parentColumns.push(_extends({}, column.parent, {
              originalID: column.parent.id,
              id: [column.parent.id, parentColumns.length].join("_")
            }));
          }
        } else if (hasParents) {
          // If other columns have parents, add a place holder if necessary
          var placeholderColumn = decorateColumn({
            originalID: [column.id, "placeholder", maxDepth - depth].join("_"),
            id: [column.id, "placeholder", maxDepth - depth, parentColumns.length].join("_")
          });
          if (isFirst || latestParentColumn.originalID !== placeholderColumn.originalID) {
            parentColumns.push(placeholderColumn);
          }
        }

        // Establish the new columns[] relationship on the parent
        if (column.parent || hasParents) {
          latestParentColumn = [].concat(parentColumns).reverse()[0];
          latestParentColumn.columns = latestParentColumn.columns || [];
          if (!latestParentColumn.columns.includes(column)) {
            latestParentColumn.columns.push(column);
          }
        }

        headerGroup.headers.push(column);
      });

      headerGroups.push(headerGroup);

      if (parentColumns.length) {
        buildGroup(parentColumns);
      }
    };

    buildGroup(columns);

    return headerGroups.reverse();
  }
};
//# sourceMappingURL=data:application/json;base64,